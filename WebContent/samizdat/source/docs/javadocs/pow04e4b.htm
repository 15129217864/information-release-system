<!-- Automatically generated with polardoc Version 1.0.7 on Fri Aug 23 12:32:12 PDT 2002 -->
<!-- com.jconfig.mac.AppUtilsMRJ | Do not remove or edit this line! -->
<HTML>
<HEAD>
<TITLE>
  Class com.jconfig.mac.AppUtilsMRJ
</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF" LINK="#0000FF" VLINK="#0000FF" ALINK="#0000FF">
<BR>
<P>

<TABLE WIDTH="100%" BGCOLOR="#FFFFBB"><TR><TD WIDTH="100%">

<B>
<A HREF="../../../readme.html"><FONT SIZE="2">Main Page</FONT></A>

<BR>
&nbsp; &nbsp; <A HREF="../../../overview.html"><FONT SIZE="2">Cookbook/Overview</FONT></A>

&nbsp; &nbsp; <A HREF="../../../imagemeister.html"><FONT SIZE="2">ImageMeister</FONT></A>

&nbsp; &nbsp; <A HREF="../../../jcprops.html"><FONT SIZE="2">the jcprops file</FONT></A>

&nbsp; &nbsp; <A HREF="../../../licensing.html"><FONT SIZE="2">Licensing</FONT></A>

<BR>
</B><I>
&nbsp; &nbsp; <FONT SIZE="2">Binary Installation & Configuration</FONT></I><B> 
[
<A HREF="../../../wininfo.html"><FONT SIZE="2">Win</FONT></A> &middot; 
<A HREF="../../../macinfo.html"><FONT SIZE="2">Mac</FONT></A> &middot; 
<A HREF="../../../nixinfo.html"><FONT SIZE="2">Nix</FONT></A> &middot;
<A HREF="../../../osxinfo.html"><FONT SIZE="2">OSX</FONT></A> 
]

&nbsp; &nbsp; <A HREF="../../../changes.html"><FONT SIZE="2">Changes</FONT></A>


<BR>
&nbsp; &nbsp; <A HREF="../../../docs/pak-76b1.htm"><FONT SIZE="2">Public API</FONT></A>

<BR>
&nbsp; &nbsp; <A HREF="../../readme.html"><FONT SIZE="2">Source Code Main Page</FONT></A>

<BR>
</B><I>
&nbsp; &nbsp; &nbsp; &nbsp; <FONT SIZE="2">Java</FONT></I><B> 
[
<A HREF="pak-76b1.htm"><FONT SIZE="2">Common</FONT></A> &middot; 
<A HREF="pak-bd9a.htm"><FONT SIZE="2">Win</FONT></A> &middot; 
<A HREF="pak-545a.htm"><FONT SIZE="2">Mac</FONT></A> &middot; 
<A HREF="pak-c96f.htm"><FONT SIZE="2">Nix</FONT></A> 
]

</B><I>
&nbsp; &nbsp; <FONT SIZE="2">Native Code</FONT></I><B>
[
<A HREF="../cdocs/common/Common.html"><FONT SIZE="2">Common</FONT></A> &middot; 
<A HREF="../cdocs/win/Windows.html"><FONT SIZE="2">Win</FONT></A> &middot; 
<A HREF="../cdocs/mac/Mac.html"><FONT SIZE="2">Mac</FONT></A> &middot; 
<A HREF="../cdocs/nix/Linux.html"><FONT SIZE="2">Nix</FONT></A>
]

&nbsp; &nbsp; <A HREF="../manifest.html"><FONT SIZE="2">Manifest</FONT></A>

<BR>
</B><I>
&nbsp; &nbsp; &nbsp; &nbsp; <FONT SIZE="2">Native Code Overviews</FONT></I><B>
[
<A HREF="../commonnative.html"><FONT SIZE="2">Common</FONT></A> &middot; 
<A HREF="../winnative.html"><FONT SIZE="2">Win</FONT></A> &middot; 
<A HREF="../macnative.html"><FONT SIZE="2">Mac</FONT></A> &middot; 
<A HREF="../nixnative.html"><FONT SIZE="2">Nix</FONT></A> &middot; 
<A HREF="../strings.html"><FONT SIZE="2">Strings</FONT></A> 
]

</B><I>
&nbsp; &nbsp; <FONT SIZE="2">Macros</FONT></I><B>
[
<A HREF="../macros.html"><FONT SIZE="2">General</FONT></A> &middot; 
<A HREF="../nativemacros.html"><FONT SIZE="2">Native Macros</FONT></A> 
]

<BR>
</B><I>
&nbsp; &nbsp; &nbsp; &nbsp; <FONT SIZE="2">Walkthroughs</FONT></I><B> 
[
<A HREF="../overview_init.html"><FONT SIZE="2">Java only</FONT></A> &middot; 
<A HREF="../overview_monitors.html"><FONT SIZE="2">Java and native</FONT></A> 
]

</B><I>
&nbsp; &nbsp; <FONT SIZE="2">Building</FONT></I><B> 
[
<A HREF="../wininstall.html"><FONT SIZE="2">Win</FONT></A> &middot; 
<A HREF="../macinstall.html"><FONT SIZE="2">Mac</FONT></A> &middot; 
<A HREF="../nixinstall.html"><FONT SIZE="2">Nix</FONT></A> &middot; 
<A HREF="../osxinstall.html"><FONT SIZE="2">OSX</FONT></A> 
]

&nbsp; &nbsp; <A HREF="../distribution.html"><FONT SIZE="2">Distribution Issues</FONT></A>

<BR>

</TD></TR></TABLE>





<A NAME="_top_"></A>
<PRE>
<A HREF="packages.htm">All Packages</A>  <A HREF="pak-545a.htm">This Package</A>  <A HREF="tree.htm">Class Hierarchy</A>  <A HREF="search.htm">Class Search</A>  <A HREF="index.htm">Index</A>
</PRE>
<HR SIZE=1 ALIGN=left WIDTH="98%">
<B><FONT FACE="Arial,Helvetica" SIZE=+2>
     Class com.jconfig.mac.AppUtilsMRJ
</FONT></B>
<PRE>
java.lang.Object
   |
   +----com.jconfig.mac.AppUtilsMRJ
</PRE>
<P><TABLE BGCOLOR="#00ccff" WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD><FONT FACE="arial,helvetica" SIZE=+1><B>&nbsp;&nbsp;Summary</B></FONT></TD> </TR> </TABLE>
<A NAME="_Summary_"></A>
<PRE>
class  <STRONG>AppUtilsMRJ</STRONG>
     extends java.lang.Object
{
          // Fields 61
     static final int <A HREF="#DATE_BKUP_OFFSET">DATE_BKUP_OFFSET</A>;
     static final int <A HREF="#DATE_CRE_OFFSET">DATE_CRE_OFFSET</A>;
     static final int <A HREF="#DATE_MOD_OFFSET">DATE_MOD_OFFSET</A>;
     static final int <A HREF="#FI_ARRAYLEN">FI_ARRAYLEN</A>;
     static final int <A HREF="#FI_OFFS_ATTRIBUTES">FI_OFFS_ATTRIBUTES</A>;
     static final int <A HREF="#FI_OFFS_CRE">FI_OFFS_CRE</A>;
     static final int <A HREF="#FI_OFFS_FLAGS">FI_OFFS_FLAGS</A>;
     static final int <A HREF="#FI_OFFS_TYPE">FI_OFFS_TYPE</A>;
     private static final String <A HREF="#copyrightString">copyrightString</A>;
     static final int <A HREF="#kCategoryAlias">kCategoryAlias</A>;
     static final int <A HREF="#kCategoryDirectory">kCategoryDirectory</A>;
     static final int <A HREF="#kCategoryFile">kCategoryFile</A>;
     static final int <A HREF="#kCategoryOSXAliasFileBit">kCategoryOSXAliasFileBit</A>;
     static final int <A HREF="#kCategoryOSXAppIsScriptableBit">kCategoryOSXAppIsScriptableBit</A>;
     static final int <A HREF="#kCategoryOSXAppPrefersClassicBit">kCategoryOSXAppPrefersClassicBit</A>;
     static final int <A HREF="#kCategoryOSXAppPrefersNativeBit">kCategoryOSXAppPrefersNativeBit</A>;
     static final int <A HREF="#kCategoryOSXApplicationBit">kCategoryOSXApplicationBit</A>;
     static final int <A HREF="#kCategoryOSXClassicAppBit">kCategoryOSXClassicAppBit</A>;
     static final int <A HREF="#kCategoryOSXContainerBit">kCategoryOSXContainerBit</A>;
     static final int <A HREF="#kCategoryOSXExtendedInfoBit">kCategoryOSXExtendedInfoBit</A>;
     static final int <A HREF="#kCategoryOSXExtensionIsHiddenBit">kCategoryOSXExtensionIsHiddenBit</A>;
     static final int <A HREF="#kCategoryOSXInvisibleBit">kCategoryOSXInvisibleBit</A>;
     static final int <A HREF="#kCategoryOSXNativeAppBit">kCategoryOSXNativeAppBit</A>;
     static final int <A HREF="#kCategoryOSXPackageBit">kCategoryOSXPackageBit</A>;
     static final int <A HREF="#kCategoryOSXPlainFileBit">kCategoryOSXPlainFileBit</A>;
     static final int <A HREF="#kCategoryOSXSymlinkBit">kCategoryOSXSymlinkBit</A>;
     static final int <A HREF="#kCategoryOSXVolumeBit">kCategoryOSXVolumeBit</A>;
     static final int <A HREF="#kCategoryUnknown">kCategoryUnknown</A>;
     static final int <A HREF="#kCategoryVolume">kCategoryVolume</A>;
     static final int <A HREF="#kDateBundleArrayLen">kDateBundleArrayLen</A>;
     static final int <A HREF="#kFinderFlagsColorMask">kFinderFlagsColorMask</A>;
     static final int <A HREF="#kForkSizesDataOffset">kForkSizesDataOffset</A>;
     static final int <A HREF="#kForkSizesLen">kForkSizesLen</A>;
     static final int <A HREF="#kForkSizesRsrcOffset">kForkSizesRsrcOffset</A>;
     static final int <A HREF="#kGetProcessesNameLen">kGetProcessesNameLen</A>;
     static final int <A HREF="#kIterateBufferSize">kIterateBufferSize</A>;
     static final int <A HREF="#kIterateEntrySize">kIterateEntrySize</A>;
     static final int <A HREF="#kIterateFlagsOffset">kIterateFlagsOffset</A>;
     static final int <A HREF="#kIterateIsAlias">kIterateIsAlias</A>;
     static final int <A HREF="#kIterateIsDir">kIterateIsDir</A>;
     static final int <A HREF="#kIterateIsFile">kIterateIsFile</A>;
     static final int <A HREF="#kIterateIsHiddenMask">kIterateIsHiddenMask</A>;
     static final int <A HREF="#kIterateMaxEntries">kIterateMaxEntries</A>;
     static final int <A HREF="#kIterateNameSize">kIterateNameSize</A>;
     static final int <A HREF="#kIterateTypeOffset">kIterateTypeOffset</A>;
     static final int <A HREF="#kLaunchWithDocOpenDoc">kLaunchWithDocOpenDoc</A>;
     static final int <A HREF="#kLaunchWithDocPrintDoc">kLaunchWithDocPrintDoc</A>;
     static final int <A HREF="#kMonitorInfoNumInts">kMonitorInfoNumInts</A>;
     static final int <A HREF="#kPNameLen">kPNameLen</A>;
     static final int <A HREF="#kPSNHiOffset">kPSNHiOffset</A>;
     static final int <A HREF="#kPSNLen">kPSNLen</A>;
     static final int <A HREF="#kPSNLoOffset">kPSNLoOffset</A>;
     static final int <A HREF="#kParIDOffset">kParIDOffset</A>;
     static final int <A HREF="#kRefPairLen">kRefPairLen</A>;
     static final int <A HREF="#kSendAppDocsOpenDoc">kSendAppDocsOpenDoc</A>;
     static final int <A HREF="#kSendAppDocsPrintDoc">kSendAppDocsPrintDoc</A>;
     static final int <A HREF="#kSetForkLengthDATA">kSetForkLengthDATA</A>;
     static final int <A HREF="#kSetForkLengthRSRC">kSetForkLengthRSRC</A>;
     private static final int <A HREF="#kUnused">kUnused</A>;
     static final int <A HREF="#kVRefOffset">kVRefOffset</A>;
     private static IToolboxLock <A HREF="#lockObject">lockObject</A>;

          // Constructors 1
     private <A HREF="#AppUtilsMRJ()">AppUtilsMRJ</A>();

          // Methods 170
     static int <A HREF="#createAlias(int, int, byte[], java.lang.String, int, int)">createAlias</A>(int, int, byte[], String, int, int);
     static String <A HREF="#createFullPathName(int, int, byte[])">createFullPathName</A>(int, int, byte[]);
     static int <A HREF="#createVolumeAlias(int, java.lang.String, int, int)">createVolumeAlias</A>(int, String, int, int);
     static int <A HREF="#disposeIconSuite(int, int)">disposeIconSuite</A>(int, int);
     static void <A HREF="#dumpCategory(java.io.PrintStream, int)">dumpCategory</A>(PrintStream, int);
     static int <A HREF="#fullPathToSpec(java.lang.String, int[], byte[])">fullPathToSpec</A>(String, int[], byte[]);
     static int <A HREF="#getAllMonitorInfo(int[], int, int[])">getAllMonitorInfo</A>(int[], int, int[]);
     static int <A HREF="#getContainer(int, int, byte[], int[], byte[])">getContainer</A>(int, int, byte[], int[], byte[]);
     static int <A HREF="#getDiskFileFlags(int, int, byte[], int[])">getDiskFileFlags</A>(int, int, byte[], int[]);
     static int <A HREF="#getDiskFileReadFlagsMask(int, int, byte[], int[])">getDiskFileReadFlagsMask</A>(int, int, byte[], int[]);
     static int <A HREF="#getDiskFileWriteFlagsMask(int, int, byte[], int[])">getDiskFileWriteFlagsMask</A>(int, int, byte[], int[]);
     static int <A HREF="#getDiskVolumeFlags(int, int[])">getDiskVolumeFlags</A>(int, int[]);
     static int <A HREF="#getDiskVolumeReadFlagsMask(int, int[])">getDiskVolumeReadFlagsMask</A>(int, int[]);
     static int <A HREF="#getDiskVolumeWriteFlagsMask(int, int[])">getDiskVolumeWriteFlagsMask</A>(int, int[]);
     static int <A HREF="#getFTACIconSuite(int, int, int, int, int[])">getFTACIconSuite</A>(int, int, int, int, int[]);
     static int <A HREF="#getFileCategory(int, int, byte[], int[])">getFileCategory</A>(int, int, byte[], int[]);
     static int <A HREF="#getFileDate(int, int, byte[], int[])">getFileDate</A>(int, int, byte[], int[]);
     static int <A HREF="#getFileIconSuite(int, int, byte[], int, int[])">getFileIconSuite</A>(int, int, byte[], int, int[]);
     static int <A HREF="#getFinderInfo(int, int, byte[], int[])">getFinderInfo</A>(int, int, byte[], int[]);
     static int <A HREF="#getForkSizes(int, int, byte[], long[])">getForkSizes</A>(int, int, byte[], long[]);
     static IToolboxLock <A HREF="#getLockObject()">getLockObject</A>();
     static int <A HREF="#getMainMonitorInfo(int[])">getMainMonitorInfo</A>(int[]);
     static int <A HREF="#getOpenableFileTypes(int, int, int[], int[])">getOpenableFileTypes</A>(int, int, int[], int[]);
     static int <A HREF="#getProcesses(int, int, int[], int[], int[], byte[], int[], int[], int[])">getProcesses</A>(int, int, int[], int[], int[], byte[], int[], int[], int[]);
     static int <A HREF="#getRawResourceFork(int, int, int, byte[], byte[])">getRawResourceFork</A>(int, int, int, byte[], byte[]);
     static int <A HREF="#getVolumeCapacity(int, long[])">getVolumeCapacity</A>(int, long[]);
     static int <A HREF="#getVolumeDate(int, int[])">getVolumeDate</A>(int, int[]);
     static int <A HREF="#getVolumeFinderInfo(int, int[])">getVolumeFinderInfo</A>(int, int[]);
     static int <A HREF="#getVolumeFreeSpace(int, long[])">getVolumeFreeSpace</A>(int, long[]);
     static int <A HREF="#getVolumeIconSuite(int, int, int[])">getVolumeIconSuite</A>(int, int, int[]);
     static int <A HREF="#getVolumeName(int, byte[])">getVolumeName</A>(int, byte[]);
     static int <A HREF="#getVolumes(int, int[], int[])">getVolumes</A>(int, int[], int[]);
     static int <A HREF="#iterateContents(int, int, byte[], int[], int[], byte[], int, int)">iterateContents</A>(int, int, byte[], int[], int[], byte[], int, int);
     static int <A HREF="#iterateVolumeContents(int, int[], int[], byte[], int, int)">iterateVolumeContents</A>(int, int[], int[], byte[], int, int);
     static int <A HREF="#launchApp(int, int, byte[], int[], int)">launchApp</A>(int, int, byte[], int[], int);
     static int <A HREF="#launchURL(java.lang.String, int, java.lang.String[])">launchURL</A>(String, int, String[]);
     static int <A HREF="#launchWithDoc(int, int, int, byte[], java.lang.String[], int[], int)">launchWithDoc</A>(int, int, int, byte[], String[], int[], int);
     static int <A HREF="#moveApp(int[], int, int)">moveApp</A>(int[], int, int);
     private static native int <A HREF="#n(int, int, byte[], int[])">n</A>(int, int, byte[], int[]);
     private static native int <A HREF="#nCreateAlias(int, int, byte[], java.lang.String, int, int)">nCreateAlias</A>(int, int, byte[], String, int, int);
     private static native int <A HREF="#nCreateFullPathName(int, int, byte[], java.lang.String[])">nCreateFullPathName</A>(int, int, byte[], String[]);
     private static native int <A HREF="#nCreateVolumeAlias(int, java.lang.String, int, int)">nCreateVolumeAlias</A>(int, String, int, int);
     private static native int <A HREF="#nDisposeIconSuite(int, int)">nDisposeIconSuite</A>(int, int);
     private static native int <A HREF="#nFullPathToSpec(java.lang.String, int[], byte[])">nFullPathToSpec</A>(String, int[], byte[]);
     private static native int <A HREF="#nGetAllMonitorInfo(int[], int, int[])">nGetAllMonitorInfo</A>(int[], int, int[]);
     private static native int <A HREF="#nGetContainer(int, int, byte[], int[], byte[])">nGetContainer</A>(int, int, byte[], int[], byte[]);
     private static native int <A HREF="#nGetDFReadFlagsMask(int, int, byte[], int[])">nGetDFReadFlagsMask</A>(int, int, byte[], int[]);
     private static native int <A HREF="#nGetDFWriteFlagsMask(int, int, byte[], int[])">nGetDFWriteFlagsMask</A>(int, int, byte[], int[]);
     private static native int <A HREF="#nGetDVReadFlagsMask(int, int[])">nGetDVReadFlagsMask</A>(int, int[]);
     private static native int <A HREF="#nGetDVWriteFlagsMask(int, int[])">nGetDVWriteFlagsMask</A>(int, int[]);
     private static native int <A HREF="#nGetDiskFileFlags(int, int, byte[], int[])">nGetDiskFileFlags</A>(int, int, byte[], int[]);
     private static native int <A HREF="#nGetDiskVolumeFlags(int, int[])">nGetDiskVolumeFlags</A>(int, int[]);
     private static native int <A HREF="#nGetFTACIconSuite(int, int, int, int, int[])">nGetFTACIconSuite</A>(int, int, int, int, int[]);
     private static native int <A HREF="#nGetFileCategory(int, int, byte[], int[])">nGetFileCategory</A>(int, int, byte[], int[]);
     private static native int <A HREF="#nGetFileDate(int, int, int, byte[], int[])">nGetFileDate</A>(int, int, int, byte[], int[]);
     private static native int <A HREF="#nGetFileIconSuite(int, int, byte[], int, int[])">nGetFileIconSuite</A>(int, int, byte[], int, int[]);
     private static native int <A HREF="#nGetFinderInfo(int, int, byte[], int[])">nGetFinderInfo</A>(int, int, byte[], int[]);
     private static native int <A HREF="#nGetForkSizes(int, int, byte[], long[])">nGetForkSizes</A>(int, int, byte[], long[]);
     private static native int <A HREF="#nGetMainMonitorInfo(int[])">nGetMainMonitorInfo</A>(int[]);
     private static native int <A HREF="#nGetOpenableFileTypes(int, int, int[], int[])">nGetOpenableFileTypes</A>(int, int, int[], int[]);
     private static native int <A HREF="#nGetProcesses(int, int, int[], int[], int[], byte[], int[], int[], int[])">nGetProcesses</A>(int, int, int[], int[], int[], byte[], int[], int[], int[]);
     private static native int <A HREF="#nGetRawResourceFork(int, int, int, byte[], byte[])">nGetRawResourceFork</A>(int, int, int, byte[], byte[]);
     private static native int <A HREF="#nGetVolumeCapacity(int, long[])">nGetVolumeCapacity</A>(int, long[]);
     private static native int <A HREF="#nGetVolumeDate(int, int, int[])">nGetVolumeDate</A>(int, int, int[]);
     private static native int <A HREF="#nGetVolumeFinderInfo(int, int[])">nGetVolumeFinderInfo</A>(int, int[]);
     private static native int <A HREF="#nGetVolumeFreeSpace(int, long[])">nGetVolumeFreeSpace</A>(int, long[]);
     private static native int <A HREF="#nGetVolumeIconSuite(int, int, int[])">nGetVolumeIconSuite</A>(int, int, int[]);
     private static native int <A HREF="#nGetVolumeName(int, byte[])">nGetVolumeName</A>(int, byte[]);
     private static native int <A HREF="#nGetVolumes(int, int[], int[])">nGetVolumes</A>(int, int[], int[]);
     private static native int <A HREF="#nIVC(int, int[], int[], byte[], int, int)">nIVC</A>(int, int[], int[], byte[], int, int);
     private static native int <A HREF="#nIterateContents(int, int, byte[], int[], int[], byte[], int, int)">nIterateContents</A>(int, int, byte[], int[], int[], byte[], int, int);
     private static native int <A HREF="#nLaunchApp(int, int, byte[], int[], int)">nLaunchApp</A>(int, int, byte[], int[], int);
     private static native int <A HREF="#nLaunchURLDirect(java.lang.String, int, java.lang.String[])">nLaunchURLDirect</A>(String, int, String[]);
     private static native int <A HREF="#nLaunchWithDoc(int, int, int, byte[], java.lang.String[], int[], int)">nLaunchWithDoc</A>(int, int, int, byte[], String[], int[], int);
     private static native int <A HREF="#nMoveApp(int[], int, int)">nMoveApp</A>(int[], int, int);
     private static native int <A HREF="#nPlotIcon(int, int, int, int, int, int, int[])">nPlotIcon</A>(int, int, int, int, int, int, int[]);
     private static native int <A HREF="#nQuitApp(int[], int)">nQuitApp</A>(int[], int);
     private static native int <A HREF="#nRenameFile(int, int, byte[], byte[], java.lang.String)">nRenameFile</A>(int, int, byte[], byte[], String);
     private static native int <A HREF="#nRenameVolume(int, java.lang.String)">nRenameVolume</A>(int, String);
     private static native int <A HREF="#nResolveAlias(int, int, byte[], int[], byte[], int)">nResolveAlias</A>(int, int, byte[], int[], byte[], int);
     private static native int <A HREF="#nSendAppDocs(int, int[], java.lang.String[], int)">nSendAppDocs</A>(int, int[], String[], int);
     private static native int <A HREF="#nSetColorCoding(int, int, byte[], int)">nSetColorCoding</A>(int, int, byte[], int);
     private static native int <A HREF="#nSetCreatorAndType(int, int, byte[], int[])">nSetCreatorAndType</A>(int, int, byte[], int[]);
     private static native int <A HREF="#nSetDiskFileFlags(int, int, byte[], int, int)">nSetDiskFileFlags</A>(int, int, byte[], int, int);
     private static native int <A HREF="#nSetDiskVolumeFlags(int, int, int)">nSetDiskVolumeFlags</A>(int, int, int);
     private static native int <A HREF="#nSetFileDate(int, int, int, byte[], int[])">nSetFileDate</A>(int, int, int, byte[], int[]);
     private static native int <A HREF="#nSetForkLength(int, int, int, int, byte[], long)">nSetForkLength</A>(int, int, int, int, byte[], long);
     private static native int <A HREF="#nSetRawResourceFork(int, int, int, byte[], byte[])">nSetRawResourceFork</A>(int, int, int, byte[], byte[]);
     private static native int <A HREF="#nSetVolumeColorCoding(int, int)">nSetVolumeColorCoding</A>(int, int);
     private static native int <A HREF="#nSetVolumeDate(int, int, int[])">nSetVolumeDate</A>(int, int, int[]);
     private static native int <A HREF="#nUpdateContainer(int, int, byte[])">nUpdateContainer</A>(int, int, byte[]);
     private static native int <A HREF="#nVerifyFile(int, int, byte[])">nVerifyFile</A>(int, int, byte[]);
     private static native int <A HREF="#nVerifyPSN(int[])">nVerifyPSN</A>(int[]);
     private static native int <A HREF="#nVerifyVolume(int)">nVerifyVolume</A>(int);
     static int <A HREF="#plotIcon(int, int, int, int, int, int, int[])">plotIcon</A>(int, int, int, int, int, int, int[]);
     static int <A HREF="#quitApp(int[], int)">quitApp</A>(int[], int);
     static int <A HREF="#renameFile(int, int, byte[], byte[], java.lang.String)">renameFile</A>(int, int, byte[], byte[], String);
     static int <A HREF="#renameVolume(int, java.lang.String)">renameVolume</A>(int, String);
     static int <A HREF="#resolveAlias(int, int, byte[], int[], byte[], int)">resolveAlias</A>(int, int, byte[], int[], byte[], int);
     static int <A HREF="#sendAppDocs(int, int[], java.lang.String[], int)">sendAppDocs</A>(int, int[], String[], int);
     static int <A HREF="#setColorCoding(int, int, byte[], int)">setColorCoding</A>(int, int, byte[], int);
     static int <A HREF="#setCreatorAndType(int, int, byte[], int[])">setCreatorAndType</A>(int, int, byte[], int[]);
     static int <A HREF="#setDiskFileFlags(int, int, byte[], int, int)">setDiskFileFlags</A>(int, int, byte[], int, int);
     static int <A HREF="#setDiskVolumeFlags(int, int, int)">setDiskVolumeFlags</A>(int, int, int);
     static int <A HREF="#setFileDate(int, int, byte[], int[])">setFileDate</A>(int, int, byte[], int[]);
     static int <A HREF="#setForkLength(int, int, int, int, byte[], long)">setForkLength</A>(int, int, int, int, byte[], long);
     static void <A HREF="#setLockObject(com.jconfig.mac.IToolboxLock)">setLockObject</A>(IToolboxLock);
     static int <A HREF="#setRawResourceFork(int, int, int, byte[], byte[])">setRawResourceFork</A>(int, int, int, byte[], byte[]);
     static int <A HREF="#setVolumeColorCoding(int, int)">setVolumeColorCoding</A>(int, int);
     static int <A HREF="#setVolumeDate(int, int[])">setVolumeDate</A>(int, int[]);
     static void <A HREF="#testLink()">testLink</A>();
     static int <A HREF="#updateContainer(int, int, byte[])">updateContainer</A>(int, int, byte[]);
     static int <A HREF="#verifyFile(int, int, byte[])">verifyFile</A>(int, int, byte[]);
     static int <A HREF="#verifyPSN(int[])">verifyPSN</A>(int[]);
     static int <A HREF="#verifyVolume(int)">verifyVolume</A>(int);
     private static int <A HREF="#wrap_nCreateAlias(int, int, byte[], java.lang.String, int, int)">wrap_nCreateAlias</A>(int, int, byte[], String, int, int);
     private static int <A HREF="#wrap_nCreateFullPathName(int, int, byte[], java.lang.String[])">wrap_nCreateFullPathName</A>(int, int, byte[], String[]);
     private static int <A HREF="#wrap_nCreateVolumeAlias(int, java.lang.String, int, int)">wrap_nCreateVolumeAlias</A>(int, String, int, int);
     private static int <A HREF="#wrap_nDisposeIconSuite(int, int)">wrap_nDisposeIconSuite</A>(int, int);
     private static int <A HREF="#wrap_nFullPathToSpec(java.lang.String, int[], byte[])">wrap_nFullPathToSpec</A>(String, int[], byte[]);
     private static int <A HREF="#wrap_nGetAllMonitorInfo(int[], int, int[])">wrap_nGetAllMonitorInfo</A>(int[], int, int[]);
     private static int <A HREF="#wrap_nGetContainer(int, int, byte[], int[], byte[])">wrap_nGetContainer</A>(int, int, byte[], int[], byte[]);
     private static int <A HREF="#wrap_nGetDFReadFlagsMask(int, int, byte[], int[])">wrap_nGetDFReadFlagsMask</A>(int, int, byte[], int[]);
     private static int <A HREF="#wrap_nGetDFWriteFlagsMask(int, int, byte[], int[])">wrap_nGetDFWriteFlagsMask</A>(int, int, byte[], int[]);
     private static int <A HREF="#wrap_nGetDVReadFlagsMask(int, int[])">wrap_nGetDVReadFlagsMask</A>(int, int[]);
     private static int <A HREF="#wrap_nGetDVWriteFlagsMask(int, int[])">wrap_nGetDVWriteFlagsMask</A>(int, int[]);
     private static int <A HREF="#wrap_nGetDiskFileFlags(int, int, byte[], int[])">wrap_nGetDiskFileFlags</A>(int, int, byte[], int[]);
     private static int <A HREF="#wrap_nGetDiskVolumeFlags(int, int[])">wrap_nGetDiskVolumeFlags</A>(int, int[]);
     private static int <A HREF="#wrap_nGetFTACIconSuite(int, int, int, int, int[])">wrap_nGetFTACIconSuite</A>(int, int, int, int, int[]);
     private static int <A HREF="#wrap_nGetFileCategory(int, int, byte[], int[])">wrap_nGetFileCategory</A>(int, int, byte[], int[]);
     private static int <A HREF="#wrap_nGetFileDate(int, int, int, byte[], int[])">wrap_nGetFileDate</A>(int, int, int, byte[], int[]);
     private static int <A HREF="#wrap_nGetFileIconSuite(int, int, byte[], int, int[])">wrap_nGetFileIconSuite</A>(int, int, byte[], int, int[]);
     private static int <A HREF="#wrap_nGetFinderInfo(int, int, byte[], int[])">wrap_nGetFinderInfo</A>(int, int, byte[], int[]);
     private static int <A HREF="#wrap_nGetForkSizes(int, int, byte[], long[])">wrap_nGetForkSizes</A>(int, int, byte[], long[]);
     private static int <A HREF="#wrap_nGetMainMonitorInfo(int[])">wrap_nGetMainMonitorInfo</A>(int[]);
     private static int <A HREF="#wrap_nGetOpenableFileTypes(int, int, int[], int[])">wrap_nGetOpenableFileTypes</A>(int, int, int[], int[]);
     private static int <A HREF="#wrap_nGetProcesses(int, int, int[], int[], int[], byte[], int[], int[], int[])">wrap_nGetProcesses</A>(int, int, int[], int[], int[], byte[], int[], int[], int[]);
     private static int <A HREF="#wrap_nGetRawResourceFork(int, int, int, byte[], byte[])">wrap_nGetRawResourceFork</A>(int, int, int, byte[], byte[]);
     private static int <A HREF="#wrap_nGetVolumeCapacity(int, long[])">wrap_nGetVolumeCapacity</A>(int, long[]);
     private static int <A HREF="#wrap_nGetVolumeDate(int, int, int[])">wrap_nGetVolumeDate</A>(int, int, int[]);
     private static int <A HREF="#wrap_nGetVolumeFinderInfo(int, int[])">wrap_nGetVolumeFinderInfo</A>(int, int[]);
     private static int <A HREF="#wrap_nGetVolumeFreeSpace(int, long[])">wrap_nGetVolumeFreeSpace</A>(int, long[]);
     private static int <A HREF="#wrap_nGetVolumeIconSuite(int, int, int[])">wrap_nGetVolumeIconSuite</A>(int, int, int[]);
     private static int <A HREF="#wrap_nGetVolumeName(int, byte[])">wrap_nGetVolumeName</A>(int, byte[]);
     private static int <A HREF="#wrap_nGetVolumes(int, int[], int[])">wrap_nGetVolumes</A>(int, int[], int[]);
     private static int <A HREF="#wrap_nIVC(int, int[], int[], byte[], int, int)">wrap_nIVC</A>(int, int[], int[], byte[], int, int);
     private static int <A HREF="#wrap_nIterateContents(int, int, byte[], int[], int[], byte[], int, int)">wrap_nIterateContents</A>(int, int, byte[], int[], int[], byte[], int, int);
     private static int <A HREF="#wrap_nLaunchApp(int, int, byte[], int[], int)">wrap_nLaunchApp</A>(int, int, byte[], int[], int);
     private static int <A HREF="#wrap_nLaunchURLDirect(java.lang.String, int, java.lang.String[])">wrap_nLaunchURLDirect</A>(String, int, String[]);
     private static int <A HREF="#wrap_nLaunchWithDoc(int, int, int, byte[], java.lang.String[], int[], int)">wrap_nLaunchWithDoc</A>(int, int, int, byte[], String[], int[], int);
     private static int <A HREF="#wrap_nMoveApp(int[], int, int)">wrap_nMoveApp</A>(int[], int, int);
     private static int <A HREF="#wrap_nPlotIcon(int, int, int, int, int, int, int[])">wrap_nPlotIcon</A>(int, int, int, int, int, int, int[]);
     private static int <A HREF="#wrap_nQuitApp(int[], int)">wrap_nQuitApp</A>(int[], int);
     private static int <A HREF="#wrap_nRenameFile(int, int, byte[], byte[], java.lang.String)">wrap_nRenameFile</A>(int, int, byte[], byte[], String);
     private static int <A HREF="#wrap_nRenameVolume(int, java.lang.String)">wrap_nRenameVolume</A>(int, String);
     private static int <A HREF="#wrap_nResolveAlias(int, int, byte[], int[], byte[], int)">wrap_nResolveAlias</A>(int, int, byte[], int[], byte[], int);
     private static int <A HREF="#wrap_nSendAppDocs(int, int[], java.lang.String[], int)">wrap_nSendAppDocs</A>(int, int[], String[], int);
     private static int <A HREF="#wrap_nSetColorCoding(int, int, byte[], int)">wrap_nSetColorCoding</A>(int, int, byte[], int);
     private static int <A HREF="#wrap_nSetCreatorAndType(int, int, byte[], int[])">wrap_nSetCreatorAndType</A>(int, int, byte[], int[]);
     private static int <A HREF="#wrap_nSetDiskFileFlags(int, int, byte[], int, int)">wrap_nSetDiskFileFlags</A>(int, int, byte[], int, int);
     private static int <A HREF="#wrap_nSetDiskVolumeFlags(int, int, int)">wrap_nSetDiskVolumeFlags</A>(int, int, int);
     private static int <A HREF="#wrap_nSetFileDate(int, int, int, byte[], int[])">wrap_nSetFileDate</A>(int, int, int, byte[], int[]);
     private static int <A HREF="#wrap_nSetForkLength(int, int, int, int, byte[], long)">wrap_nSetForkLength</A>(int, int, int, int, byte[], long);
     private static int <A HREF="#wrap_nSetRawResourceFork(int, int, int, byte[], byte[])">wrap_nSetRawResourceFork</A>(int, int, int, byte[], byte[]);
     private static int <A HREF="#wrap_nSetVolumeColorCoding(int, int)">wrap_nSetVolumeColorCoding</A>(int, int);
     private static int <A HREF="#wrap_nSetVolumeDate(int, int, int[])">wrap_nSetVolumeDate</A>(int, int, int[]);
     private static int <A HREF="#wrap_nUpdateContainer(int, int, byte[])">wrap_nUpdateContainer</A>(int, int, byte[]);
     private static int <A HREF="#wrap_nVerifyFile(int, int, byte[])">wrap_nVerifyFile</A>(int, int, byte[]);
     private static int <A HREF="#wrap_nVerifyPSN(int[])">wrap_nVerifyPSN</A>(int[]);
     private static int <A HREF="#wrap_nVerifyVolume(int)">wrap_nVerifyVolume</A>(int);

}
</PRE>
<P>
<DL>
<P>
Contains static methods which call native methods. Contains most of the Mac native code.
Many of the methods of this file are simply wrappers around the private native methods.
Almost all of these methods return an error code; 0 means success, other values indicate some
form of error.

<P>
The term 'WANC' in the documentation means that that method is just a Wrapper Around Native Code.
<P>
<DT><B>Author:</B>
<DD>
Copyright (c) 1997-2002 Samizdat Productions. All Rights Reserved.

</DL>
<P>
<BR><BR>
<BR><TABLE BGCOLOR="#00ccff" WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD><FONT FACE="arial,helvetica" SIZE=+1><B>&nbsp;&nbsp;Fields</B></FONT></TD> </TR> </TABLE>
<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="copyrightString"><FONT COLOR="#0000FF">&middot;</FONT> copyrightString</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static final String copyrightString
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="FI_ARRAYLEN"><FONT COLOR="#0000FF">&middot;</FONT> FI_ARRAYLEN</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int FI_ARRAYLEN
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="FI_OFFS_CRE"><FONT COLOR="#0000FF">&middot;</FONT> FI_OFFS_CRE</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int FI_OFFS_CRE
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="FI_OFFS_TYPE"><FONT COLOR="#0000FF">&middot;</FONT> FI_OFFS_TYPE</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int FI_OFFS_TYPE
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="FI_OFFS_FLAGS"><FONT COLOR="#0000FF">&middot;</FONT> FI_OFFS_FLAGS</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int FI_OFFS_FLAGS
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="FI_OFFS_ATTRIBUTES"><FONT COLOR="#0000FF">&middot;</FONT> FI_OFFS_ATTRIBUTES</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int FI_OFFS_ATTRIBUTES
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kLaunchWithDocOpenDoc"><FONT COLOR="#0000FF">&middot;</FONT> kLaunchWithDocOpenDoc</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kLaunchWithDocOpenDoc
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kLaunchWithDocPrintDoc"><FONT COLOR="#0000FF">&middot;</FONT> kLaunchWithDocPrintDoc</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kLaunchWithDocPrintDoc
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kSendAppDocsOpenDoc"><FONT COLOR="#0000FF">&middot;</FONT> kSendAppDocsOpenDoc</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kSendAppDocsOpenDoc
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kSendAppDocsPrintDoc"><FONT COLOR="#0000FF">&middot;</FONT> kSendAppDocsPrintDoc</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kSendAppDocsPrintDoc
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kCategoryVolume"><FONT COLOR="#0000FF">&middot;</FONT> kCategoryVolume</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kCategoryVolume
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kCategoryDirectory"><FONT COLOR="#0000FF">&middot;</FONT> kCategoryDirectory</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kCategoryDirectory
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kCategoryFile"><FONT COLOR="#0000FF">&middot;</FONT> kCategoryFile</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kCategoryFile
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kCategoryAlias"><FONT COLOR="#0000FF">&middot;</FONT> kCategoryAlias</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kCategoryAlias
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kCategoryUnknown"><FONT COLOR="#0000FF">&middot;</FONT> kCategoryUnknown</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kCategoryUnknown
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kCategoryOSXExtendedInfoBit"><FONT COLOR="#0000FF">&middot;</FONT> kCategoryOSXExtendedInfoBit</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kCategoryOSXExtendedInfoBit
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kCategoryOSXPlainFileBit"><FONT COLOR="#0000FF">&middot;</FONT> kCategoryOSXPlainFileBit</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kCategoryOSXPlainFileBit
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kCategoryOSXPackageBit"><FONT COLOR="#0000FF">&middot;</FONT> kCategoryOSXPackageBit</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kCategoryOSXPackageBit
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kCategoryOSXApplicationBit"><FONT COLOR="#0000FF">&middot;</FONT> kCategoryOSXApplicationBit</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kCategoryOSXApplicationBit
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kCategoryOSXContainerBit"><FONT COLOR="#0000FF">&middot;</FONT> kCategoryOSXContainerBit</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kCategoryOSXContainerBit
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kCategoryOSXAliasFileBit"><FONT COLOR="#0000FF">&middot;</FONT> kCategoryOSXAliasFileBit</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kCategoryOSXAliasFileBit
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kCategoryOSXSymlinkBit"><FONT COLOR="#0000FF">&middot;</FONT> kCategoryOSXSymlinkBit</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kCategoryOSXSymlinkBit
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kCategoryOSXInvisibleBit"><FONT COLOR="#0000FF">&middot;</FONT> kCategoryOSXInvisibleBit</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kCategoryOSXInvisibleBit
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kCategoryOSXNativeAppBit"><FONT COLOR="#0000FF">&middot;</FONT> kCategoryOSXNativeAppBit</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kCategoryOSXNativeAppBit
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kCategoryOSXClassicAppBit"><FONT COLOR="#0000FF">&middot;</FONT> kCategoryOSXClassicAppBit</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kCategoryOSXClassicAppBit
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kCategoryOSXAppPrefersNativeBit"><FONT COLOR="#0000FF">&middot;</FONT> kCategoryOSXAppPrefersNativeBit</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kCategoryOSXAppPrefersNativeBit
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kCategoryOSXAppPrefersClassicBit"><FONT COLOR="#0000FF">&middot;</FONT> kCategoryOSXAppPrefersClassicBit</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kCategoryOSXAppPrefersClassicBit
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kCategoryOSXAppIsScriptableBit"><FONT COLOR="#0000FF">&middot;</FONT> kCategoryOSXAppIsScriptableBit</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kCategoryOSXAppIsScriptableBit
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kCategoryOSXVolumeBit"><FONT COLOR="#0000FF">&middot;</FONT> kCategoryOSXVolumeBit</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kCategoryOSXVolumeBit
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kCategoryOSXExtensionIsHiddenBit"><FONT COLOR="#0000FF">&middot;</FONT> kCategoryOSXExtensionIsHiddenBit</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kCategoryOSXExtensionIsHiddenBit
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kPNameLen"><FONT COLOR="#0000FF">&middot;</FONT> kPNameLen</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kPNameLen
</PRE>
<BLOCKQUOTE>
<P>
The length of a Pascal string; for many methods which accept a writable byte array as an argument,
the array must have at least this many elements.
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kPSNLen"><FONT COLOR="#0000FF">&middot;</FONT> kPSNLen</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kPSNLen
</PRE>
<BLOCKQUOTE>
<P>
The length of an array used to hold a ProcessSerialNumber
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kPSNLoOffset"><FONT COLOR="#0000FF">&middot;</FONT> kPSNLoOffset</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kPSNLoOffset
</PRE>
<BLOCKQUOTE>
<P>
The offset of the low int of a ProcessSerialNumber
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kPSNHiOffset"><FONT COLOR="#0000FF">&middot;</FONT> kPSNHiOffset</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kPSNHiOffset
</PRE>
<BLOCKQUOTE>
<P>
The offset of the high int of a ProcessSerialNumber
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kRefPairLen"><FONT COLOR="#0000FF">&middot;</FONT> kRefPairLen</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kRefPairLen
</PRE>
<BLOCKQUOTE>
<P>
The length of an array used to hold a vRef and parID
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kVRefOffset"><FONT COLOR="#0000FF">&middot;</FONT> kVRefOffset</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kVRefOffset
</PRE>
<BLOCKQUOTE>
<P>
The offset of the vRef in an array used to hold a vRef and parID
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kParIDOffset"><FONT COLOR="#0000FF">&middot;</FONT> kParIDOffset</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kParIDOffset
</PRE>
<BLOCKQUOTE>
<P>
The offset of the parID in an array used to hold a vRef and parID
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kForkSizesLen"><FONT COLOR="#0000FF">&middot;</FONT> kForkSizesLen</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kForkSizesLen
</PRE>
<BLOCKQUOTE>
<P>
The length of an array used to hold the length of a file's data and resource forks.
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kForkSizesDataOffset"><FONT COLOR="#0000FF">&middot;</FONT> kForkSizesDataOffset</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kForkSizesDataOffset
</PRE>
<BLOCKQUOTE>
<P>
The offset of the data fork size in an array used to hold the length of a file's data and resource forks.
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kForkSizesRsrcOffset"><FONT COLOR="#0000FF">&middot;</FONT> kForkSizesRsrcOffset</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kForkSizesRsrcOffset
</PRE>
<BLOCKQUOTE>
<P>
The offset of the resource fork size in an array used to hold the length of a file's data and resource forks.
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kFinderFlagsColorMask"><FONT COLOR="#0000FF">&middot;</FONT> kFinderFlagsColorMask</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kFinderFlagsColorMask
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kIterateEntrySize"><FONT COLOR="#0000FF">&middot;</FONT> kIterateEntrySize</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kIterateEntrySize
</PRE>
<BLOCKQUOTE>
<P>
See iterateContents()
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kIterateMaxEntries"><FONT COLOR="#0000FF">&middot;</FONT> kIterateMaxEntries</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kIterateMaxEntries
</PRE>
<BLOCKQUOTE>
<P>
See iterateContents()
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kIterateBufferSize"><FONT COLOR="#0000FF">&middot;</FONT> kIterateBufferSize</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kIterateBufferSize
</PRE>
<BLOCKQUOTE>
<P>
See iterateContents()
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kIterateNameSize"><FONT COLOR="#0000FF">&middot;</FONT> kIterateNameSize</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kIterateNameSize
</PRE>
<BLOCKQUOTE>
<P>
See iterateContents()
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kIterateTypeOffset"><FONT COLOR="#0000FF">&middot;</FONT> kIterateTypeOffset</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kIterateTypeOffset
</PRE>
<BLOCKQUOTE>
<P>
See iterateContents()
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kIterateFlagsOffset"><FONT COLOR="#0000FF">&middot;</FONT> kIterateFlagsOffset</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kIterateFlagsOffset
</PRE>
<BLOCKQUOTE>
<P>
See iterateContents()
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kIterateIsFile"><FONT COLOR="#0000FF">&middot;</FONT> kIterateIsFile</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kIterateIsFile
</PRE>
<BLOCKQUOTE>
<P>
See iterateContents()
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kIterateIsDir"><FONT COLOR="#0000FF">&middot;</FONT> kIterateIsDir</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kIterateIsDir
</PRE>
<BLOCKQUOTE>
<P>
See iterateContents()
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kIterateIsAlias"><FONT COLOR="#0000FF">&middot;</FONT> kIterateIsAlias</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kIterateIsAlias
</PRE>
<BLOCKQUOTE>
<P>
See iterateContents()
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kIterateIsHiddenMask"><FONT COLOR="#0000FF">&middot;</FONT> kIterateIsHiddenMask</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kIterateIsHiddenMask
</PRE>
<BLOCKQUOTE>
<P>
See iterateContents()
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kMonitorInfoNumInts"><FONT COLOR="#0000FF">&middot;</FONT> kMonitorInfoNumInts</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kMonitorInfoNumInts
</PRE>
<BLOCKQUOTE>
<P>
Used in retrieving monitor information; see	the 'getAllMonitorInfo' method.
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kGetProcessesNameLen"><FONT COLOR="#0000FF">&middot;</FONT> kGetProcessesNameLen</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kGetProcessesNameLen
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kDateBundleArrayLen"><FONT COLOR="#0000FF">&middot;</FONT> kDateBundleArrayLen</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kDateBundleArrayLen
</PRE>
<BLOCKQUOTE>
<P>
The getFileDate() and getVolumeDate() methods are passed
an array of java ints, into which the native code puts the modification,
creation and access dates. Each date takes 6 ints: year, month, day,
hour, minute, and second. This defines the total length of the jint array.
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="DATE_MOD_OFFSET"><FONT COLOR="#0000FF">&middot;</FONT> DATE_MOD_OFFSET</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int DATE_MOD_OFFSET
</PRE>
<BLOCKQUOTE>
<P>
The offset of the modification date in the array passed to getFileDate() and getVolumeDate().
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="DATE_CRE_OFFSET"><FONT COLOR="#0000FF">&middot;</FONT> DATE_CRE_OFFSET</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int DATE_CRE_OFFSET
</PRE>
<BLOCKQUOTE>
<P>
The offset of the creation date in the array passed to getFileDate() and getVolumeDate().
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="DATE_BKUP_OFFSET"><FONT COLOR="#0000FF">&middot;</FONT> DATE_BKUP_OFFSET</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int DATE_BKUP_OFFSET
</PRE>
<BLOCKQUOTE>
<P>
The offset of the backup date in the array passed to getFileDate() and getVolumeDate().
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kSetForkLengthDATA"><FONT COLOR="#0000FF">&middot;</FONT> kSetForkLengthDATA</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kSetForkLengthDATA
</PRE>
<BLOCKQUOTE>
<P>
See the 'whichFork' argument to setForkLength().
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kSetForkLengthRSRC"><FONT COLOR="#0000FF">&middot;</FONT> kSetForkLengthRSRC</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kSetForkLengthRSRC
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kUnused"><FONT COLOR="#0000FF">&middot;</FONT> kUnused</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static final int kUnused
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="lockObject"><FONT COLOR="#0000FF">&middot;</FONT> lockObject</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static <A HREF="pow0a704.htm">IToolboxLock</A> lockObject
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<P>

<BR><TABLE BGCOLOR="#00ccff" WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD><FONT FACE="arial,helvetica" SIZE=+1><B>&nbsp;&nbsp;Constructors</B></FONT></TD> </TR> </TABLE>
<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="AppUtilsMRJ"><FONT COLOR="#FFCC00">&middot;</FONT></A>
<A NAME="AppUtilsMRJ()">AppUtilsMRJ</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private AppUtilsMRJ() </PRE>
<BLOCKQUOTE>
</BLOCKQUOTE> <BR>


<BR><TABLE BGCOLOR="#00ccff" WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD><FONT FACE="arial,helvetica" SIZE=+1><B>&nbsp;&nbsp;Methods</B></FONT></TD> </TR> </TABLE>
<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="setLockObject"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="setLockObject(com.jconfig.mac.IToolboxLock)">setLockObject</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static void setLockObject(<A HREF="pow0a704.htm">IToolboxLock</A> lock) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getLockObject"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getLockObject()">getLockObject</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static <A HREF="pow0a704.htm">IToolboxLock</A> getLockObject() </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="dumpCategory"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="dumpCategory(java.io.PrintStream, int)">dumpCategory</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static void dumpCategory(PrintStream ps, 
                            int category) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="createFullPathName"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="createFullPathName(int, int, byte[])">createFullPathName</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static String createFullPathName(int vRef, 
                                    int parID, 
                                    byte[] pName) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Returns a full path name created from an FSSpec.
The name will be in MRJ format: quoted-printable, and with '/' as the separator.
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the vRefNum of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> parID</I></TD> <TD>the parID of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> pName</I></TD> <TD>the name of the file, as a Pascal string</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getProcesses"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getProcesses(int, int, int[], int[], int[], byte[], int[], int[], int[])">getProcesses</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getProcesses(int maxToReturn, 
                           int flags, 
                           int[] numRet, 
                           int[] vRefs, 
                           int[] parIDs, 
                           byte[] pNames, 
                           int[] psnLo, 
                           int[] psnHi, 
                           int[] proFlags) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Gets a list of the running processes.
Information on each process is placed into a series of arrays.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> maxToReturn</I></TD> <TD>the lengths of the 'vRefs', 'parIDs', 'psnLo', 'psnHi', and 'proFlags' arrays.</TD></TR>
<TR VALIGN=TOP> <TD><I> flags</I></TD> <TD>0 or a combination of the FileRegistry.kGetProcesses??? flags</TD></TR>
<TR VALIGN=TOP> <TD><I> numRet</I></TD> <TD>the number of processes returned will be placed at numRet[ 0 ]</TD></TR>
<TR VALIGN=TOP> <TD><I> vRefs</I></TD> <TD>the vRefNum of the file of each process will be placed at each element of this array.
Must have at least 'maxToReturn' elements.</TD></TR>
<TR VALIGN=TOP> <TD><I> parIDs</I></TD> <TD>the parID of the file of each process will be placed at each element of this array.
Must have at least 'maxToReturn' elements.</TD></TR>
<TR VALIGN=TOP> <TD><I> pNames</I></TD> <TD>the name of the file of each process will be placed into this array; each name will
be a Pascal string, and will occupy 'kGetProcessesNameLen' elements.
Must have at least 'maxToReturn' * 'kGetProcessesNameLen' elements.</TD></TR>
<TR VALIGN=TOP> <TD><I> psnLo</I></TD> <TD>the low int of the process' PSN will be placed at each element of this array.
Must have at least 'maxToReturn' elements.</TD></TR>
<TR VALIGN=TOP> <TD><I> psnHi</I></TD> <TD>the high int of the process' PSN will be placed at each element of this array.
Must have at least 'maxToReturn' elements.</TD></TR>
<TR VALIGN=TOP> <TD><I> proFlags</I></TD> <TD>flags on the process will be placed at each element of this array.
Not currently used.
Must have at least 'maxToReturn' elements.</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getAllMonitorInfo"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getAllMonitorInfo(int[], int, int[])">getAllMonitorInfo</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getAllMonitorInfo(int[] monitorInfo, 
                                int maxToReturn, 
                                int[] numReturned) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Gets information on all the user's monitors. 
Info on each monitor will be placed into the 'monitorInfo' int array. Each monitor consumes 'kMonitorInfoNumInts'
elements of this array. The format of each monitor is as described in the 'getMainMonitorInfo' method.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> montitorInfo</I></TD> <TD>must have at least 'maxToReturn' * kMonitorInfoNumInts elements.</TD></TR>
<TR VALIGN=TOP> <TD><I> maxToReturn</I></TD> <TD>the maximum number of monitors to return info on.</TD></TR>
<TR VALIGN=TOP> <TD><I> numReturned</I></TD> <TD>the number of monitors returned will be placed at numReturned[ 0 ]</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getMainMonitorInfo"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getMainMonitorInfo(int[])">getMainMonitorInfo</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getMainMonitorInfo(int[] monitorInfo) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Stores information on the user's main monitor into the 'monitorInfo' array.
This array must have at least 'kMonitorInfoNumInts' elements.
The information on the monitor is stored at the 'kOffs???' offsets defined in 'MonitorMRJ.java':

<BR><B>WANC</B><BR>
<P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="launchApp"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="launchApp(int, int, byte[], int[], int)">launchApp</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int launchApp(int vRef, 
                        int parID, 
                        byte[] pName, 
                        int[] retPSN, 
                        int flags) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Launches an app without any arguments.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the vRefNum of the app's file</TD></TR>
<TR VALIGN=TOP> <TD><I> parID</I></TD> <TD>the parID of the app's file</TD></TR>
<TR VALIGN=TOP> <TD><I> pName</I></TD> <TD>the name of the app's file, as a Pascal string</TD></TR>
<TR VALIGN=TOP> <TD><I> retPSN</I></TD> <TD>on return, the process' PSN will be stored in this array, the low int of the PSN at
'kPSNLoOffset', and the high int at 'kPSNHiOffset'</TD></TR>
<TR VALIGN=TOP> <TD><I> flags</I></TD> <TD>0, or AppFile.AF_NO_LAYER_SWITCH</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="launchWithDoc"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="launchWithDoc(int, int, int, byte[], java.lang.String[], int[], int)">launchWithDoc</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int launchWithDoc(int whichCommand, 
                            int vRef, 
                            int parID, 
                            byte[] pName, 
                            String[] filePaths, 
                            int[] retPSN, 
                            int flags) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Launches an app with one or more documents.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> whichCommand</I></TD> <TD>either kLaunchWithDocOpenDoc or kLaunchWithDocPrintDoc</TD></TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the vRefNum of the app's file</TD></TR>
<TR VALIGN=TOP> <TD><I> parID</I></TD> <TD>the parID of the app's file</TD></TR>
<TR VALIGN=TOP> <TD><I> pName</I></TD> <TD>the name of the app's file, as a Pascal string</TD></TR>
<TR VALIGN=TOP> <TD><I> filePaths</I></TD> <TD>the full paths of the files to open the app with</TD></TR>
<TR VALIGN=TOP> <TD><I> retPSN</I></TD> <TD>on return, the process' PSN will be stored in this array, the low int of the PSN at
'kPSNLoOffset', and the high int at 'kPSNHiOffset'</TD></TR>
<TR VALIGN=TOP> <TD><I> flags</I></TD> <TD>0, or AppFile.AF_NO_LAYER_SWITCH</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getContainer"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getContainer(int, int, byte[], int[], byte[])">getContainer</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getContainer(int vRef, 
                           int parID, 
                           byte[] pName, 
                           int[] pContParID, 
                           byte[] pContName) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Get the folder which contains a file.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the vRefNum of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> parID</I></TD> <TD>the parID of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> pName</I></TD> <TD>the name of the file, as a Pascal string</TD></TR>
<TR VALIGN=TOP> <TD><I> pContParID</I></TD> <TD>the parID of the container will be placed at pContParID[ 0 ]</TD></TR>
<TR VALIGN=TOP> <TD><I> pContName</I></TD> <TD>the name of the container will be placed into this array as a Pascal string.
Must have kPNameLen or more elements.</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="iterateContents"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="iterateContents(int, int, byte[], int[], int[], byte[], int, int)">iterateContents</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int iterateContents(int vRef, 
                              int parID, 
                              byte[] pName, 
                              int[] dirIDArray, 
                              int[] numRet, 
                              byte[] buffer, 
                              int numEntries, 
                              int flags) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Get the names and other information on the objects inside a folder.
The native code puts information on each file or folder into a byte array.

Each entry in this array is 'kIterateEntrySize' bytes long; the name of the object occupies the first
'kIterateNameSize' bytes.

The type of the object is stored at offset 'kIterateTypeOffset', and will
have the value 'kIterateIsFile', 'kIterateIsDir', or 'kIterateIsAlias'.

Flags on the object are stored at offset 'kIterateFlagsOffset'. This is not currently used.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the vRefNum of the folder</TD></TR>
<TR VALIGN=TOP> <TD><I> parID</I></TD> <TD>the parID of the folder</TD></TR>
<TR VALIGN=TOP> <TD><I> pName</I></TD> <TD>the name of the folder, as a Pascal string</TD></TR>
<TR VALIGN=TOP> <TD><I> dirIDArray</I></TD> <TD>the dirID of the folder will be placed at dirIDArray[ 0 ]</TD></TR>
<TR VALIGN=TOP> <TD><I> numRet</I></TD> <TD>the number of objects returned will be placed at numRet[ 0 ]</TD></TR>
<TR VALIGN=TOP> <TD><I> buffer</I></TD> <TD>will hold information on each object, in the format given above.</TD></TR>
<TR VALIGN=TOP> <TD><I> numEntries</I></TD> <TD>the number of entries which 'buffer' can hold</TD></TR>
<TR VALIGN=TOP> <TD><I> flags</I></TD> <TD>0, or one or more of the FileRegistry.kIgnore??? flags</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="iterateVolumeContents"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="iterateVolumeContents(int, int[], int[], byte[], int, int)">iterateVolumeContents</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int iterateVolumeContents(int vRef, 
                                    int[] dirIDArray, 
                                    int[] numRet, 
                                    byte[] buffer, 
                                    int numEntries, 
                                    int flags) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Get the names and other information on the objects inside the root level of a volume.
The native code puts information on each file or folder into a byte array in the same format as
described for the 'iterateContents' method.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the vRefNum of the volume</TD></TR>
<TR VALIGN=TOP> <TD><I> dirIDArray</I></TD> <TD>the dirID of the volume will be placed at dirIDArray[ 0 ]</TD></TR>
<TR VALIGN=TOP> <TD><I> numRet</I></TD> <TD>the number of objects returned will be placed at numRet[ 0 ]</TD></TR>
<TR VALIGN=TOP> <TD><I> buffer</I></TD> <TD>will hold information on each object, in the format described for the 'iterateContents' method.</TD></TR>
<TR VALIGN=TOP> <TD><I> numEntries</I></TD> <TD>the number of entries which 'buffer' can hold</TD></TR>
<TR VALIGN=TOP> <TD><I> flags</I></TD> <TD>0, or one or more of the FileRegistry.kIgnore??? flags</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="createVolumeAlias"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="createVolumeAlias(int, java.lang.String, int, int)">createVolumeAlias</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int createVolumeAlias(int targetVRef, 
                                String newAlias, 
                                int creator, 
                                int flags) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Creates an alias to a volume

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> targetVRef</I></TD> <TD>the vRefNum of the target volume</TD></TR>
<TR VALIGN=TOP> <TD><I> newAlias</I></TD> <TD>the full path of the new alias</TD></TR>
<TR VALIGN=TOP> <TD><I> creator</I></TD> <TD>ignored; set to 0</TD></TR>
<TR VALIGN=TOP> <TD><I> flags</I></TD> <TD>Needs to be documented</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getVolumeFinderInfo"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getVolumeFinderInfo(int, int[])">getVolumeFinderInfo</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getVolumeFinderInfo(int vRef, 
                                  int[] finfo) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Gets the FinderInfo for a volume.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the vRefNum of the volume</TD></TR>
<TR VALIGN=TOP> <TD><I> on</I></TD> <TD>return, contains the finder info</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="setColorCoding"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="setColorCoding(int, int, byte[], int)">setColorCoding</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int setColorCoding(int vRef, 
                             int parID, 
                             byte[] pName, 
                             int newCoding) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Sets the color coding of a file.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the vRefNum of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> parID</I></TD> <TD>the parID of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> pName</I></TD> <TD>the name of the file, as a Pascal string</TD></TR>
<TR VALIGN=TOP> <TD><I> newCoding</I></TD> <TD>the new color coding</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="setVolumeColorCoding"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="setVolumeColorCoding(int, int)">setVolumeColorCoding</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int setVolumeColorCoding(int vRef, 
                                   int newCoding) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Sets the color coding of a volume.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the vRefNum of the volume</TD></TR>
<TR VALIGN=TOP> <TD><I> newCoding</I></TD> <TD>the new color coding</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getFileCategory"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getFileCategory(int, int, byte[], int[])">getFileCategory</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getFileCategory(int vRef, 
                              int parID, 
                              byte[] pName, 
                              int[] cat) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Gets the type of a file.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the vRefNum of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> parID</I></TD> <TD>the parID of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> pName</I></TD> <TD>the name of the file, as a Pascal string</TD></TR>
<TR VALIGN=TOP> <TD><I> cat</I></TD> <TD>the type of the file will be placed at cat[ 0 ], and will be one of the 'kCategory???' values</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="resolveAlias"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="resolveAlias(int, int, byte[], int[], byte[], int)">resolveAlias</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int resolveAlias(int inVRef, 
                           int inParID, 
                           byte[] pInName, 
                           int[] outVRefAndParID, 
                           byte[] pOutName, 
                           int flags) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Resolves an alias file.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> inVRef</I></TD> <TD>the vRefNum of the alias</TD></TR>
<TR VALIGN=TOP> <TD><I> inParID</I></TD> <TD>the parID of the alias</TD></TR>
<TR VALIGN=TOP> <TD><I> pInName</I></TD> <TD>the name of the alias, as a Pascal string</TD></TR>
<TR VALIGN=TOP> <TD><I> outVRefAndParID</I></TD> <TD>the vRef of the resolved alias will be placed at vRefAndParID[ 0 ]
the parID of the resolved alias will be placed at vRefAndParID[ 1 ]</TD></TR>
<TR VALIGN=TOP> <TD><I> pOutName</I></TD> <TD>the name of the resolved alias will be placed in this array as a Pascal string.
This array must have at least kPNameLen elements.</TD></TR>
<TR VALIGN=TOP> <TD><I> flags</I></TD> <TD>either FileRegistry.ALIAS_UI or FileRegistry.ALIAS_NO_UI</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="createAlias"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="createAlias(int, int, byte[], java.lang.String, int, int)">createAlias</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int createAlias(int vRef, 
                          int parID, 
                          byte[] pName, 
                          String newAlias, 
                          int creator, 
                          int flags) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Creates an alias to a file or folder.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the vRefNum of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> parID</I></TD> <TD>the parID of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> pName</I></TD> <TD>the name of the file, as a Pascal string</TD></TR>
<TR VALIGN=TOP> <TD><I> newAlias</I></TD> <TD>the full path of the new alias</TD></TR>
<TR VALIGN=TOP> <TD><I> creator</I></TD> <TD>Needs to be documented</TD></TR>
<TR VALIGN=TOP> <TD><I> flags</I></TD> <TD>Needs to be documented</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getVolumeCapacity"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getVolumeCapacity(int, long[])">getVolumeCapacity</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getVolumeCapacity(int vRef, 
                                long[] cap) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Returns the capacity of a volume

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the vRefNum of the volume</TD></TR>
<TR VALIGN=TOP> <TD><I> cap</I></TD> <TD>the capacity will be placed at cap[ 0 ]</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getVolumeFreeSpace"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getVolumeFreeSpace(int, long[])">getVolumeFreeSpace</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getVolumeFreeSpace(int vRef, 
                                 long[] space) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Returns the free space of a volume

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the vRefNum of the volume</TD></TR>
<TR VALIGN=TOP> <TD><I> cap</I></TD> <TD>the free space will be placed at cap[ 0 ]</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getVolumeName"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getVolumeName(int, byte[])">getVolumeName</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getVolumeName(int vRef, 
                            byte[] pName) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Gets the name of a volume

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the vRefNum</TD></TR>
<TR VALIGN=TOP> <TD><I> pName</I></TD> <TD>the name will be placed in this array as a Pascal string
This array must have at least kPNameLen elements.</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="renameVolume"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="renameVolume(int, java.lang.String)">renameVolume</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int renameVolume(int vRef, 
                           String newName) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Renames a volume.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the vRefNum</TD></TR>
<TR VALIGN=TOP> <TD><I> newName</I></TD> <TD>the new name of the volume</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="renameFile"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="renameFile(int, int, byte[], byte[], java.lang.String)">renameFile</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int renameFile(int vRef, 
                         int parID, 
                         byte[] pName, 
                         byte[] pOutName, 
                         String newName) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Renames a file or folder.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the vRefNum of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> parID</I></TD> <TD>the parID of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> pName</I></TD> <TD>the name of the file, as a Pascal string</TD></TR>
<TR VALIGN=TOP> <TD><I> pOutName</I></TD> <TD>returns the new name of the file, as a Pascal string
Must have at least kPNameLen elements.</TD></TR>
<TR VALIGN=TOP> <TD><I> newName</I></TD> <TD>the new name of the file</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getForkSizes"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getForkSizes(int, int, byte[], long[])">getForkSizes</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getForkSizes(int vRef, 
                           int parID, 
                           byte[] pName, 
                           long[] sizes) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Gets the sizes of a file's data and resource forks.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the vRefNum of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> parID</I></TD> <TD>the parID of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> pName</I></TD> <TD>the name of the file, as a Pascal string</TD></TR>
<TR VALIGN=TOP> <TD><I> sizes</I></TD> <TD>must have at least kForkSizesLen elements
the data fork size will be placed at sizes[ kForkSizesDataOffset ], and
the resource fork size will be placed at sizes[ kForkSizesRsrcOffset ]</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="updateContainer"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="updateContainer(int, int, byte[])">updateContainer</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int updateContainer(int vRef, 
                              int parID, 
                              byte[] pName) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Updates the folder which contains a file.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the vRefNum of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> parID</I></TD> <TD>the parID of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> pName</I></TD> <TD>the name of the file, as a Pascal string</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getDiskVolumeFlags"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getDiskVolumeFlags(int, int[])">getDiskVolumeFlags</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getDiskVolumeFlags(int vRef, 
                                 int[] flags) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Gets the flags for a volume. These flags are defined in DiskVolume.java.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the vRefNum of the volume</TD></TR>
<TR VALIGN=TOP> <TD><I> flags</I></TD> <TD>the flags will be placed at flags[ 0 ]</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="setDiskVolumeFlags"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="setDiskVolumeFlags(int, int, int)">setDiskVolumeFlags</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int setDiskVolumeFlags(int vRef, 
                                 int flagMask, 
                                 int newFlags) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Sets the flags for a volume. These flags are defined in DiskVolume.java.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the vRefNum of the volume</TD></TR>
<TR VALIGN=TOP> <TD><I> flagsMask</I></TD> <TD>indicates which flags in newFlags are significant</TD></TR>
<TR VALIGN=TOP> <TD><I> newFlags</I></TD> <TD>which flags to set or reset</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getDiskVolumeReadFlagsMask"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getDiskVolumeReadFlagsMask(int, int[])">getDiskVolumeReadFlagsMask</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getDiskVolumeReadFlagsMask(int vRef, 
                                         int[] masks) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Indicates which flags returned by 'getDiskVolumeFlags' are significant.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the vRefNum of the volume</TD></TR>
<TR VALIGN=TOP> <TD><I> masks</I></TD> <TD>the mask will be placed at masks[ 0 ]</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getDiskVolumeWriteFlagsMask"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getDiskVolumeWriteFlagsMask(int, int[])">getDiskVolumeWriteFlagsMask</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getDiskVolumeWriteFlagsMask(int vRef, 
                                          int[] masks) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Indicates which flags can be set for the volume.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the vRefNum of the volume</TD></TR>
<TR VALIGN=TOP> <TD><I> masks</I></TD> <TD>the mask will be placed at masks[ 0 ]</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getVolumes"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getVolumes(int, int[], int[])">getVolumes</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getVolumes(int maxToReturn, 
                         int[] numRet, 
                         int[] vRefs) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Gets the vRefNums of the currently mounted volumes.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> maxToReturn</I></TD> <TD>the maximum number of volumes to return</TD></TR>
<TR VALIGN=TOP> <TD><I> numRet</I></TD> <TD>the number returned will be placed at numRet[ 0 ]</TD></TR>
<TR VALIGN=TOP> <TD><I> vRefs</I></TD> <TD>the vRefNum of each volume will be placed in this array.
Must have at least 'maxToReturn' elements.</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getFTACIconSuite"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getFTACIconSuite(int, int, int, int, int[])">getFTACIconSuite</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getFTACIconSuite(int vRef, 
                               int creator, 
                               int type, 
                               int selector, 
                               int[] pHSuite) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Gets the icon suite for a file type.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the volume to search for that type</TD></TR>
<TR VALIGN=TOP> <TD><I> creator</I></TD> <TD>the file's creator</TD></TR>
<TR VALIGN=TOP> <TD><I> type</I></TD> <TD>the file's type</TD></TR>
<TR VALIGN=TOP> <TD><I> selector</I></TD> <TD>unused; set to 0</TD></TR>
<TR VALIGN=TOP> <TD><I> pHSuite</I></TD> <TD>the suite's handle will be placed at pHSuite[ 0 ]</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getVolumeIconSuite"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getVolumeIconSuite(int, int, int[])">getVolumeIconSuite</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getVolumeIconSuite(int vRef, 
                                 int selector, 
                                 int[] pHSuite) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Gets the icon suite for a volume.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the vRefNum of the volume</TD></TR>
<TR VALIGN=TOP> <TD><I> selector</I></TD> <TD>unused; set to 0</TD></TR>
<TR VALIGN=TOP> <TD><I> pHSuite</I></TD> <TD>the suite's handle will be placed at pHSuite[ 0 ]</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getFileIconSuite"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getFileIconSuite(int, int, byte[], int, int[])">getFileIconSuite</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getFileIconSuite(int vRef, 
                               int parID, 
                               byte[] pName, 
                               int selector, 
                               int[] pHSuite) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Gets the icon suite for a file.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the vRefNum of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> parID</I></TD> <TD>the parID of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> pName</I></TD> <TD>the name of the file, as a Pascal string</TD></TR>
<TR VALIGN=TOP> <TD><I> selector</I></TD> <TD>unused; set to 0</TD></TR>
<TR VALIGN=TOP> <TD><I> pHSuite</I></TD> <TD>the suite's handle will be placed at pHSuite[ 0 ]</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="plotIcon"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="plotIcon(int, int, int, int, int, int, int[])">plotIcon</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int plotIcon(int which, 
                       int width, 
                       int height, 
                       int hSuite, 
                       int xform, 
                       int align, 
                       int[] pData) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Draws an icon of an icon suite.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> which</I></TD> <TD>either IconBundle.ICON_LARGE or IconBundle.ICON_SMALL</TD></TR>
<TR VALIGN=TOP> <TD><I> width</I></TD> <TD>the width of the icon</TD></TR>
<TR VALIGN=TOP> <TD><I> height</I></TD> <TD>the height of the icon</TD></TR>
<TR VALIGN=TOP> <TD><I> hSuite</I></TD> <TD>the icon suite</TD></TR>
<TR VALIGN=TOP> <TD><I> xform</I></TD> <TD>any transformation to be applied to the icon</TD></TR>
<TR VALIGN=TOP> <TD><I> align</I></TD> <TD>any alignment to tbe applied to the icon</TD></TR>
<TR VALIGN=TOP> <TD><I> pData</I></TD> <TD>an array of ints which will hold the Java format ARGB data for the icon
This must have at least width * height elements</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="disposeIconSuite"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="disposeIconSuite(int, int)">disposeIconSuite</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int disposeIconSuite(int hSuite, 
                               int flags) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Disposes an icon suite.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> hSuite</I></TD> <TD>the icon suite</TD></TR>
<TR VALIGN=TOP> <TD><I> flags</I></TD> <TD>passed to Mac API DisposeIconSuite()</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getDiskFileFlags"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getDiskFileFlags(int, int, byte[], int[])">getDiskFileFlags</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getDiskFileFlags(int vRef, 
                               int parID, 
                               byte[] pName, 
                               int[] flags) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Gets the flags for a file. These flags are defined in DiskFile.java.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the vRefNum of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> parID</I></TD> <TD>the parID of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> pName</I></TD> <TD>the name of the file, as a Pascal string</TD></TR>
<TR VALIGN=TOP> <TD><I> flags</I></TD> <TD>the flags will be placed at flags[ 0 ]</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="setDiskFileFlags"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="setDiskFileFlags(int, int, byte[], int, int)">setDiskFileFlags</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int setDiskFileFlags(int vRef, 
                               int parID, 
                               byte[] pName, 
                               int flagMask, 
                               int newFlags) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Sets the flags for a file. These flags are defined in DiskFile.java.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the vRefNum of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> parID</I></TD> <TD>the parID of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> pName</I></TD> <TD>the name of the file, as a Pascal string</TD></TR>
<TR VALIGN=TOP> <TD><I> flagsMask</I></TD> <TD>indicates which flags in newFlags are significant</TD></TR>
<TR VALIGN=TOP> <TD><I> newFlags</I></TD> <TD>which flags to set or reset</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getDiskFileReadFlagsMask"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getDiskFileReadFlagsMask(int, int, byte[], int[])">getDiskFileReadFlagsMask</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getDiskFileReadFlagsMask(int vRef, 
                                       int parID, 
                                       byte[] pName, 
                                       int[] masks) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Indicates which flags returned by 'getDiskVolumeFlags' are significant.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the vRefNum of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> parID</I></TD> <TD>the parID of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> pName</I></TD> <TD>the name of the file, as a Pascal string</TD></TR>
<TR VALIGN=TOP> <TD><I> masks</I></TD> <TD>the mask will be placed at masks[ 0 ]</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getDiskFileWriteFlagsMask"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getDiskFileWriteFlagsMask(int, int, byte[], int[])">getDiskFileWriteFlagsMask</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getDiskFileWriteFlagsMask(int vRef, 
                                        int parID, 
                                        byte[] pName, 
                                        int[] masks) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Indicates which flags can be set for the file.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the vRefNum of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> parID</I></TD> <TD>the parID of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> pName</I></TD> <TD>the name of the file, as a Pascal string</TD></TR>
<TR VALIGN=TOP> <TD><I> masks</I></TD> <TD>the mask will be placed at masks[ 0 ]</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="verifyFile"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="verifyFile(int, int, byte[])">verifyFile</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int verifyFile(int vRef, 
                         int parID, 
                         byte[] pName) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Verifies whether a file exists.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the vRefNum of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> parID</I></TD> <TD>the parID of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> pName</I></TD> <TD>the name of the file, as a Pascal string</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="verifyVolume"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="verifyVolume(int)">verifyVolume</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int verifyVolume(int vRef) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Verifies whether a volume is still mounted.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the vRefNum of the volume</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="fullPathToSpec"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="fullPathToSpec(java.lang.String, int[], byte[])">fullPathToSpec</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int fullPathToSpec(String fullPath, 
                             int[] vRefAndParID, 
                             byte[] pName) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Converts a full path name to a FSSpec.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> fullPath</I></TD> <TD>the full path, in MRJ format: quoted-printable, and with '/' as the separator.</TD></TR>
<TR VALIGN=TOP> <TD><I> vRefAndParID</I></TD> <TD>the vRef of the file will be placed at vRefAndParID[ 0 ]
the parID of the file will be placed at vRefAndParID[ 1 ]</TD></TR>
<TR VALIGN=TOP> <TD><I> pName</I></TD> <TD>the name of the file will be placed in this array, in Pascal format
This array must have at least kPNameLen elements.</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getFinderInfo"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getFinderInfo(int, int, byte[], int[])">getFinderInfo</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getFinderInfo(int vRef, 
                            int parID, 
                            byte[] pName, 
                            int[] finfo) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Gets the creator, type, flags, and attributes of a file.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the vRefNum of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> parID</I></TD> <TD>the parID of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> pName</I></TD> <TD>the name of the file, as a Pascal string</TD></TR>
<TR VALIGN=TOP> <TD><I> finfo</I></TD> <TD>information on the file will be placed in this array.
This must have at least 4 elements, which will be placed as follows:
creator at finfo[ 0 ], type at finfo[ 1 ], flags at finfo[ 2 ], attribs at finfo[ 3 ]</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="setCreatorAndType"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="setCreatorAndType(int, int, byte[], int[])">setCreatorAndType</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int setCreatorAndType(int vRef, 
                                int parID, 
                                byte[] pName, 
                                int[] creatorAndType) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Sets the FinderInfo of a file.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> vRef</I></TD> <TD>the vRefNum of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> parID</I></TD> <TD>the parID of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> pName</I></TD> <TD>the name of the file, as a Pascal string</TD></TR>
<TR VALIGN=TOP> <TD><I> creatorAndType</I></TD> <TD>the new creator should be at creatorAndType[ 0 ], and the new type at creatorAndType[ 1 ]</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="sendAppDocs"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="sendAppDocs(int, int[], java.lang.String[], int)">sendAppDocs</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int sendAppDocs(int whichCommand, 
                          int[] appPSN, 
                          String[] filePaths, 
                          int flags) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Sends an AppleEvent to a process.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> whichCommand</I></TD> <TD>either 'kSendAppDocsOpenDoc' or 'kSendAppDocsPrintDoc'</TD></TR>
<TR VALIGN=TOP> <TD><I> appPSN</I></TD> <TD>the PSN of the process. The low int of the PSN should be at 'kPSNLoOffset',
and the high int at 'kPSNHiOffset'</TD></TR>
<TR VALIGN=TOP> <TD><I> filePaths</I></TD> <TD>full paths of the documents to be sent to the app</TD></TR>
<TR VALIGN=TOP> <TD><I> flags</I></TD> <TD>unused; set to 0</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="quitApp"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="quitApp(int[], int)">quitApp</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int quitApp(int[] appPSN, 
                      int flags) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Quits a process.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> appPSN</I></TD> <TD>the PSN of the process. The low int of the PSN should be at 'kPSNLoOffset',
and the high int at 'kPSNHiOffset'</TD></TR>
<TR VALIGN=TOP> <TD><I> flags</I></TD> <TD>unused; set to 0</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="moveApp"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="moveApp(int[], int, int)">moveApp</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int moveApp(int[] appPSN, 
                      int selector, 
                      int flags) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Moves a process.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> appPSN</I></TD> <TD>the PSN of the process. The low int of the PSN should be at 'kPSNLoOffset',
and the high int at 'kPSNHiOffset'</TD></TR>
<TR VALIGN=TOP> <TD><I> selector</I></TD> <TD>one of the values defined in FileRegistry: 'APP_MOVE_TOFRONT', etc.</TD></TR>
<TR VALIGN=TOP> <TD><I> flags</I></TD> <TD>unused; set to 0</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="verifyPSN"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="verifyPSN(int[])">verifyPSN</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int verifyPSN(int[] appPSN) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Verifies that a process is still running.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> appPSN</I></TD> <TD>the PSN of the process. The low int of the PSN should be at 'kPSNLoOffset',
and the high int at 'kPSNHiOffset'</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="launchURL"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="launchURL(java.lang.String, int, java.lang.String[])">launchURL</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int launchURL(String url, 
                        int flags, 
                        String[] preferredBrowsers) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Launches the given URL.
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> url</I></TD> <TD>the fully qualified URL</TD></TR>
<TR VALIGN=TOP> <TD><I> flags</I></TD> <TD>currently ignored</TD></TR>
<TR VALIGN=TOP> <TD><I> preferredBrowsers</I></TD> <TD>currently ignored</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getFileDate"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getFileDate(int, int, byte[], int[])">getFileDate</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getFileDate(int vRef, 
                          int parID, 
                          byte[] pName, 
                          int[] datesArray) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Get the dates of a file into an array of ints

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> datesArray</I></TD> <TD>the three dates for the file are placed in this array, in the order:
modification, creation, backup</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="setFileDate"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="setFileDate(int, int, byte[], int[])">setFileDate</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int setFileDate(int vRef, 
                          int parID, 
                          byte[] pName, 
                          int[] datesArray) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Set the dates of a file from an array of ints

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> datesArray</I></TD> <TD>the three dates for the file should be placed in this array, in the order:
modification, creation, backup</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getVolumeDate"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getVolumeDate(int, int[])">getVolumeDate</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getVolumeDate(int vRef, 
                            int[] datesArray) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Get the dates of a volume into an array of ints

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> datesArray</I></TD> <TD>the three dates for the volume are placed in this array, in the order:
modification, creation, backup</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="setVolumeDate"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="setVolumeDate(int, int[])">setVolumeDate</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int setVolumeDate(int vRef, 
                            int[] datesArray) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Set the dates of a volume from an array of ints

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> datesArray</I></TD> <TD>the three dates for the volume should be placed in this array, in the order:
modification, creation, backup</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getOpenableFileTypes"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getOpenableFileTypes(int, int, int[], int[])">getOpenableFileTypes</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getOpenableFileTypes(int vRef, 
                                   int creator, 
                                   int[] numReturned, 
                                   int[] fileTypes) </PRE>
<BLOCKQUOTE>
<DL>
<P>
<BR><B>WANC</B><BR>
<P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getRawResourceFork"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getRawResourceFork(int, int, int, byte[], byte[])">getRawResourceFork</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getRawResourceFork(int flags, 
                                 int vRef, 
                                 int parID, 
                                 byte[] pName, 
                                 byte[] data) </PRE>
<BLOCKQUOTE>
<DL>
<P>
<BR><B>WANC</B><BR>
<P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="setRawResourceFork"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="setRawResourceFork(int, int, int, byte[], byte[])">setRawResourceFork</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int setRawResourceFork(int flags, 
                                 int vRef, 
                                 int parID, 
                                 byte[] pName, 
                                 byte[] data) </PRE>
<BLOCKQUOTE>
<DL>
<P>
<BR><B>WANC</B><BR>
<P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="setForkLength"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="setForkLength(int, int, int, int, byte[], long)">setForkLength</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int setForkLength(int flags, 
                            int whichFork, 
                            int vRef, 
                            int parID, 
                            byte[] pName, 
                            long newLen) </PRE>
<BLOCKQUOTE>
<DL>
<P>
<BR><B>WANC</B><BR>
<P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nGetRawResourceFork"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nGetRawResourceFork(int, int, int, byte[], byte[])">wrap_nGetRawResourceFork</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nGetRawResourceFork(int flags, 
                                               int vRef, 
                                               int parID, 
                                               byte[] pName, 
                                               byte[] data) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nSetRawResourceFork"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nSetRawResourceFork(int, int, int, byte[], byte[])">wrap_nSetRawResourceFork</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nSetRawResourceFork(int flags, 
                                               int vRef, 
                                               int parID, 
                                               byte[] pName, 
                                               byte[] data) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nSetForkLength"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nSetForkLength(int, int, int, int, byte[], long)">wrap_nSetForkLength</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nSetForkLength(int flags, 
                                          int whichFork, 
                                          int vRef, 
                                          int parID, 
                                          byte[] pName, 
                                          long newLen) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nSendAppDocs"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nSendAppDocs(int, int[], java.lang.String[], int)">wrap_nSendAppDocs</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nSendAppDocs(int whichCommand, 
                                        int[] appPSN, 
                                        String[] filePaths, 
                                        int flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nQuitApp"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nQuitApp(int[], int)">wrap_nQuitApp</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nQuitApp(int[] appPSN, 
                                    int flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nLaunchApp"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nLaunchApp(int, int, byte[], int[], int)">wrap_nLaunchApp</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nLaunchApp(int vRef, 
                                      int parID, 
                                      byte[] pName, 
                                      int[] retPSN, 
                                      int flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nLaunchWithDoc"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nLaunchWithDoc(int, int, int, byte[], java.lang.String[], int[], int)">wrap_nLaunchWithDoc</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nLaunchWithDoc(int whichCommand, 
                                          int vRef, 
                                          int parID, 
                                          byte[] pName, 
                                          String[] filePaths, 
                                          int[] retPSN, 
                                          int flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nCreateFullPathName"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nCreateFullPathName(int, int, byte[], java.lang.String[])">wrap_nCreateFullPathName</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nCreateFullPathName(int vRef, 
                                               int parID, 
                                               byte[] pName, 
                                               String[] retArray) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nGetOpenableFileTypes"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nGetOpenableFileTypes(int, int, int[], int[])">wrap_nGetOpenableFileTypes</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nGetOpenableFileTypes(int vRef, 
                                                 int creator, 
                                                 int[] numReturned, 
                                                 int[] fileTypes) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nGetFileDate"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nGetFileDate(int, int, int, byte[], int[])">wrap_nGetFileDate</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nGetFileDate(int unused, 
                                        int vRef, 
                                        int parID, 
                                        byte[] pName, 
                                        int[] datesArray) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nSetFileDate"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nSetFileDate(int, int, int, byte[], int[])">wrap_nSetFileDate</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nSetFileDate(int unused, 
                                        int vRef, 
                                        int parID, 
                                        byte[] pName, 
                                        int[] datesArray) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nGetVolumeDate"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nGetVolumeDate(int, int, int[])">wrap_nGetVolumeDate</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nGetVolumeDate(int unused, 
                                          int vRef, 
                                          int[] datesArray) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nSetVolumeDate"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nSetVolumeDate(int, int, int[])">wrap_nSetVolumeDate</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nSetVolumeDate(int unused, 
                                          int vRef, 
                                          int[] datesArray) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nVerifyPSN"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nVerifyPSN(int[])">wrap_nVerifyPSN</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nVerifyPSN(int[] appPSN) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nMoveApp"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nMoveApp(int[], int, int)">wrap_nMoveApp</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nMoveApp(int[] appPSN, 
                                    int selector, 
                                    int flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nLaunchURLDirect"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nLaunchURLDirect(java.lang.String, int, java.lang.String[])">wrap_nLaunchURLDirect</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nLaunchURLDirect(String url, 
                                            int flags, 
                                            String[] preferredBrowsers) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nFullPathToSpec"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nFullPathToSpec(java.lang.String, int[], byte[])">wrap_nFullPathToSpec</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nFullPathToSpec(String fullPath, 
                                           int[] vRefAndParID, 
                                           byte[] pName) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nGetFinderInfo"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nGetFinderInfo(int, int, byte[], int[])">wrap_nGetFinderInfo</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nGetFinderInfo(int vRef, 
                                          int parID, 
                                          byte[] pName, 
                                          int[] finfo) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nSetCreatorAndType"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nSetCreatorAndType(int, int, byte[], int[])">wrap_nSetCreatorAndType</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nSetCreatorAndType(int vRef, 
                                              int parID, 
                                              byte[] pName, 
                                              int[] creatorAndType) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nVerifyFile"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nVerifyFile(int, int, byte[])">wrap_nVerifyFile</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nVerifyFile(int vRef, 
                                       int parID, 
                                       byte[] pName) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nVerifyVolume"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nVerifyVolume(int)">wrap_nVerifyVolume</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nVerifyVolume(int vRef) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nGetDiskFileFlags"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nGetDiskFileFlags(int, int, byte[], int[])">wrap_nGetDiskFileFlags</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nGetDiskFileFlags(int vRef, 
                                             int parID, 
                                             byte[] pName, 
                                             int[] flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nSetDiskFileFlags"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nSetDiskFileFlags(int, int, byte[], int, int)">wrap_nSetDiskFileFlags</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nSetDiskFileFlags(int vRef, 
                                             int parID, 
                                             byte[] pName, 
                                             int flagMask, 
                                             int newFlags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nGetDFWriteFlagsMask"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nGetDFWriteFlagsMask(int, int, byte[], int[])">wrap_nGetDFWriteFlagsMask</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nGetDFWriteFlagsMask(int vRef, 
                                                int parID, 
                                                byte[] pName, 
                                                int[] masks) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nGetDFReadFlagsMask"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nGetDFReadFlagsMask(int, int, byte[], int[])">wrap_nGetDFReadFlagsMask</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nGetDFReadFlagsMask(int vRef, 
                                               int parID, 
                                               byte[] pName, 
                                               int[] masks) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nGetDiskVolumeFlags"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nGetDiskVolumeFlags(int, int[])">wrap_nGetDiskVolumeFlags</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nGetDiskVolumeFlags(int vRef, 
                                               int[] flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nSetDiskVolumeFlags"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nSetDiskVolumeFlags(int, int, int)">wrap_nSetDiskVolumeFlags</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nSetDiskVolumeFlags(int vRef, 
                                               int flagMask, 
                                               int newFlags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nGetDVReadFlagsMask"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nGetDVReadFlagsMask(int, int[])">wrap_nGetDVReadFlagsMask</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nGetDVReadFlagsMask(int vRef, 
                                               int[] masks) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nGetDVWriteFlagsMask"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nGetDVWriteFlagsMask(int, int[])">wrap_nGetDVWriteFlagsMask</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nGetDVWriteFlagsMask(int vRef, 
                                                int[] masks) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nGetVolumes"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nGetVolumes(int, int[], int[])">wrap_nGetVolumes</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nGetVolumes(int maxToReturn, 
                                       int[] numRet, 
                                       int[] vRefs) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nUpdateContainer"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nUpdateContainer(int, int, byte[])">wrap_nUpdateContainer</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nUpdateContainer(int vRef, 
                                            int parID, 
                                            byte[] pName) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nGetFileCategory"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nGetFileCategory(int, int, byte[], int[])">wrap_nGetFileCategory</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nGetFileCategory(int vRef, 
                                            int parID, 
                                            byte[] pName, 
                                            int[] cat) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nGetForkSizes"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nGetForkSizes(int, int, byte[], long[])">wrap_nGetForkSizes</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nGetForkSizes(int vRef, 
                                         int parID, 
                                         byte[] pName, 
                                         long[] len) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nRenameFile"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nRenameFile(int, int, byte[], byte[], java.lang.String)">wrap_nRenameFile</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nRenameFile(int vRef, 
                                       int parID, 
                                       byte[] pName, 
                                       byte[] pOutName, 
                                       String newName) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nRenameVolume"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nRenameVolume(int, java.lang.String)">wrap_nRenameVolume</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nRenameVolume(int vRef, 
                                         String newName) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nGetVolumeCapacity"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nGetVolumeCapacity(int, long[])">wrap_nGetVolumeCapacity</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nGetVolumeCapacity(int vRef, 
                                              long[] cap) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nGetVolumeFreeSpace"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nGetVolumeFreeSpace(int, long[])">wrap_nGetVolumeFreeSpace</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nGetVolumeFreeSpace(int vRef, 
                                               long[] space) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nCreateAlias"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nCreateAlias(int, int, byte[], java.lang.String, int, int)">wrap_nCreateAlias</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nCreateAlias(int vRef, 
                                        int parID, 
                                        byte[] pName, 
                                        String newAlias, 
                                        int creator, 
                                        int flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nGetVolumeName"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nGetVolumeName(int, byte[])">wrap_nGetVolumeName</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nGetVolumeName(int vRef, 
                                          byte[] pName) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nResolveAlias"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nResolveAlias(int, int, byte[], int[], byte[], int)">wrap_nResolveAlias</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nResolveAlias(int inVRef, 
                                         int inParID, 
                                         byte[] pInName, 
                                         int[] outVRefAndParID, 
                                         byte[] pOutName, 
                                         int flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nSetColorCoding"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nSetColorCoding(int, int, byte[], int)">wrap_nSetColorCoding</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nSetColorCoding(int vRef, 
                                           int parID, 
                                           byte[] pName, 
                                           int newCoding) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nSetVolumeColorCoding"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nSetVolumeColorCoding(int, int)">wrap_nSetVolumeColorCoding</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nSetVolumeColorCoding(int vRef, 
                                                 int newCoding) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nGetVolumeFinderInfo"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nGetVolumeFinderInfo(int, int[])">wrap_nGetVolumeFinderInfo</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nGetVolumeFinderInfo(int vRef, 
                                                int[] finfo) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nGetVolumeIconSuite"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nGetVolumeIconSuite(int, int, int[])">wrap_nGetVolumeIconSuite</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nGetVolumeIconSuite(int vRef, 
                                               int selector, 
                                               int[] pHSuite) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nGetFileIconSuite"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nGetFileIconSuite(int, int, byte[], int, int[])">wrap_nGetFileIconSuite</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nGetFileIconSuite(int vRef, 
                                             int parID, 
                                             byte[] pName, 
                                             int selector, 
                                             int[] pHSuite) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nGetFTACIconSuite"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nGetFTACIconSuite(int, int, int, int, int[])">wrap_nGetFTACIconSuite</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nGetFTACIconSuite(int vRef, 
                                             int creator, 
                                             int type, 
                                             int selector, 
                                             int[] pHSuite) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nPlotIcon"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nPlotIcon(int, int, int, int, int, int, int[])">wrap_nPlotIcon</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nPlotIcon(int which, 
                                     int width, 
                                     int height, 
                                     int hSuite, 
                                     int xform, 
                                     int align, 
                                     int[] pData) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nCreateVolumeAlias"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nCreateVolumeAlias(int, java.lang.String, int, int)">wrap_nCreateVolumeAlias</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nCreateVolumeAlias(int targetVRef, 
                                              String newAlias, 
                                              int creator, 
                                              int flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nIterateContents"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nIterateContents(int, int, byte[], int[], int[], byte[], int, int)">wrap_nIterateContents</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nIterateContents(int vRef, 
                                            int parID, 
                                            byte[] pName, 
                                            int[] dirIDArray, 
                                            int[] numRet, 
                                            byte[] buffer, 
                                            int numEntries, 
                                            int flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nIVC"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nIVC(int, int[], int[], byte[], int, int)">wrap_nIVC</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nIVC(int vRef, 
                                int[] dirIDArray, 
                                int[] numRet, 
                                byte[] buffer, 
                                int numEntries, 
                                int flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nGetContainer"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nGetContainer(int, int, byte[], int[], byte[])">wrap_nGetContainer</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nGetContainer(int vRef, 
                                         int parID, 
                                         byte[] pName, 
                                         int[] pContParID, 
                                         byte[] pContName) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nDisposeIconSuite"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nDisposeIconSuite(int, int)">wrap_nDisposeIconSuite</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nDisposeIconSuite(int hSuite, 
                                             int flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nGetAllMonitorInfo"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nGetAllMonitorInfo(int[], int, int[])">wrap_nGetAllMonitorInfo</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nGetAllMonitorInfo(int[] monitorInfo, 
                                              int maxToReturn, 
                                              int[] numReturned) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nGetMainMonitorInfo"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nGetMainMonitorInfo(int[])">wrap_nGetMainMonitorInfo</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nGetMainMonitorInfo(int[] monitorInfo) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="wrap_nGetProcesses"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="wrap_nGetProcesses(int, int, int[], int[], int[], byte[], int[], int[], int[])">wrap_nGetProcesses</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static int wrap_nGetProcesses(int maxToReturn, 
                                         int flags, 
                                         int[] numRet, 
                                         int[] vRefs, 
                                         int[] parIDs, 
                                         byte[] pNames, 
                                         int[] psnLo, 
                                         int[] psnHi, 
                                         int[] proFlags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nGetRawResourceFork"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nGetRawResourceFork(int, int, int, byte[], byte[])">nGetRawResourceFork</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nGetRawResourceFork(int flags, 
                                                 int vRef, 
                                                 int parID, 
                                                 byte[] pName, 
                                                 byte[] data) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nSetRawResourceFork"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nSetRawResourceFork(int, int, int, byte[], byte[])">nSetRawResourceFork</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nSetRawResourceFork(int flags, 
                                                 int vRef, 
                                                 int parID, 
                                                 byte[] pName, 
                                                 byte[] data) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nSetForkLength"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nSetForkLength(int, int, int, int, byte[], long)">nSetForkLength</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nSetForkLength(int flags, 
                                            int whichFork, 
                                            int vRef, 
                                            int parID, 
                                            byte[] pName, 
                                            long newLen) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nSendAppDocs"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nSendAppDocs(int, int[], java.lang.String[], int)">nSendAppDocs</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nSendAppDocs(int whichCommand, 
                                          int[] appPSN, 
                                          String[] filePaths, 
                                          int flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nQuitApp"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nQuitApp(int[], int)">nQuitApp</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nQuitApp(int[] appPSN, 
                                      int flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nLaunchApp"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nLaunchApp(int, int, byte[], int[], int)">nLaunchApp</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nLaunchApp(int vRef, 
                                        int parID, 
                                        byte[] pName, 
                                        int[] retPSN, 
                                        int flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nLaunchWithDoc"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nLaunchWithDoc(int, int, int, byte[], java.lang.String[], int[], int)">nLaunchWithDoc</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nLaunchWithDoc(int whichCommand, 
                                            int vRef, 
                                            int parID, 
                                            byte[] pName, 
                                            String[] filePaths, 
                                            int[] retPSN, 
                                            int flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nCreateFullPathName"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nCreateFullPathName(int, int, byte[], java.lang.String[])">nCreateFullPathName</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nCreateFullPathName(int vRef, 
                                                 int parID, 
                                                 byte[] pName, 
                                                 String[] retArray) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nGetOpenableFileTypes"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nGetOpenableFileTypes(int, int, int[], int[])">nGetOpenableFileTypes</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nGetOpenableFileTypes(int vRef, 
                                                   int creator, 
                                                   int[] numReturned, 
                                                   int[] fileTypes) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nGetFileDate"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nGetFileDate(int, int, int, byte[], int[])">nGetFileDate</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nGetFileDate(int unused, 
                                          int vRef, 
                                          int parID, 
                                          byte[] pName, 
                                          int[] datesArray) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Called by getFileDate
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> unused</I></TD> <TD>no longer used, set to 0
all three dates for the file are placed in the 'datesArray' argument, in the order:
modification, creation, backup</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nSetFileDate"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nSetFileDate(int, int, int, byte[], int[])">nSetFileDate</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nSetFileDate(int unused, 
                                          int vRef, 
                                          int parID, 
                                          byte[] pName, 
                                          int[] datesArray) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Called by xetFileDate
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> unused</I></TD> <TD>no longer used, set to 0
all three dates for the file should be placed in the 'datesArray' argument, in the order:
modification, creation, backup</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nGetVolumeDate"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nGetVolumeDate(int, int, int[])">nGetVolumeDate</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nGetVolumeDate(int unused, 
                                            int vRef, 
                                            int[] datesArray) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Called by getVolumeDate
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> unused</I></TD> <TD>no longer used, set to 0
all three dates for the volume are placed in the 'datesArray' argument, in the order:
modification, creation, backup</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nSetVolumeDate"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nSetVolumeDate(int, int, int[])">nSetVolumeDate</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nSetVolumeDate(int unused, 
                                            int vRef, 
                                            int[] datesArray) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Called by setVolumeDate
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> unused</I></TD> <TD>no longer used, set to 0
all three dates for the volume should be placed in the 'datesArray' argument, in the order:
modification, creation, backup</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nVerifyPSN"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nVerifyPSN(int[])">nVerifyPSN</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nVerifyPSN(int[] appPSN) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nMoveApp"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nMoveApp(int[], int, int)">nMoveApp</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nMoveApp(int[] appPSN, 
                                      int selector, 
                                      int flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nLaunchURLDirect"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nLaunchURLDirect(java.lang.String, int, java.lang.String[])">nLaunchURLDirect</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nLaunchURLDirect(String url, 
                                              int flags, 
                                              String[] preferredBrowsers) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nFullPathToSpec"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nFullPathToSpec(java.lang.String, int[], byte[])">nFullPathToSpec</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nFullPathToSpec(String fullPath, 
                                             int[] vRefAndParID, 
                                             byte[] pName) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nGetFinderInfo"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nGetFinderInfo(int, int, byte[], int[])">nGetFinderInfo</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nGetFinderInfo(int vRef, 
                                            int parID, 
                                            byte[] pName, 
                                            int[] finfo) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="n"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="n(int, int, byte[], int[])">n</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int n(int vRef, 
                               int parID, 
                               byte[] pName, 
                               int[] creatorAndType) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nVerifyFile"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nVerifyFile(int, int, byte[])">nVerifyFile</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nVerifyFile(int vRef, 
                                         int parID, 
                                         byte[] pName) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nVerifyVolume"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nVerifyVolume(int)">nVerifyVolume</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nVerifyVolume(int vRef) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nGetDiskFileFlags"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nGetDiskFileFlags(int, int, byte[], int[])">nGetDiskFileFlags</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nGetDiskFileFlags(int vRef, 
                                               int parID, 
                                               byte[] pName, 
                                               int[] flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nSetDiskFileFlags"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nSetDiskFileFlags(int, int, byte[], int, int)">nSetDiskFileFlags</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nSetDiskFileFlags(int vRef, 
                                               int parID, 
                                               byte[] pName, 
                                               int flagMask, 
                                               int newFlags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nGetDFWriteFlagsMask"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nGetDFWriteFlagsMask(int, int, byte[], int[])">nGetDFWriteFlagsMask</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nGetDFWriteFlagsMask(int vRef, 
                                                  int parID, 
                                                  byte[] pName, 
                                                  int[] masks) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nGetDFReadFlagsMask"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nGetDFReadFlagsMask(int, int, byte[], int[])">nGetDFReadFlagsMask</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nGetDFReadFlagsMask(int vRef, 
                                                 int parID, 
                                                 byte[] pName, 
                                                 int[] masks) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nGetDiskVolumeFlags"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nGetDiskVolumeFlags(int, int[])">nGetDiskVolumeFlags</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nGetDiskVolumeFlags(int vRef, 
                                                 int[] flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nSetDiskVolumeFlags"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nSetDiskVolumeFlags(int, int, int)">nSetDiskVolumeFlags</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nSetDiskVolumeFlags(int vRef, 
                                                 int flagMask, 
                                                 int newFlags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nGetDVReadFlagsMask"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nGetDVReadFlagsMask(int, int[])">nGetDVReadFlagsMask</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nGetDVReadFlagsMask(int vRef, 
                                                 int[] masks) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nGetDVWriteFlagsMask"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nGetDVWriteFlagsMask(int, int[])">nGetDVWriteFlagsMask</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nGetDVWriteFlagsMask(int vRef, 
                                                  int[] masks) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nGetVolumes"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nGetVolumes(int, int[], int[])">nGetVolumes</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nGetVolumes(int maxToReturn, 
                                         int[] numRet, 
                                         int[] vRefs) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nUpdateContainer"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nUpdateContainer(int, int, byte[])">nUpdateContainer</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nUpdateContainer(int vRef, 
                                              int parID, 
                                              byte[] pName) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nGetFileCategory"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nGetFileCategory(int, int, byte[], int[])">nGetFileCategory</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nGetFileCategory(int vRef, 
                                              int parID, 
                                              byte[] pName, 
                                              int[] cat) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nGetForkSizes"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nGetForkSizes(int, int, byte[], long[])">nGetForkSizes</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nGetForkSizes(int vRef, 
                                           int parID, 
                                           byte[] pName, 
                                           long[] len) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nRenameFile"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nRenameFile(int, int, byte[], byte[], java.lang.String)">nRenameFile</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nRenameFile(int vRef, 
                                         int parID, 
                                         byte[] pName, 
                                         byte[] pOutName, 
                                         String newName) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nRenameVolume"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nRenameVolume(int, java.lang.String)">nRenameVolume</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nRenameVolume(int vRef, 
                                           String newName) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nGetVolumeCapacity"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nGetVolumeCapacity(int, long[])">nGetVolumeCapacity</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nGetVolumeCapacity(int vRef, 
                                                long[] cap) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nGetVolumeFreeSpace"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nGetVolumeFreeSpace(int, long[])">nGetVolumeFreeSpace</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nGetVolumeFreeSpace(int vRef, 
                                                 long[] space) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nCreateAlias"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nCreateAlias(int, int, byte[], java.lang.String, int, int)">nCreateAlias</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nCreateAlias(int vRef, 
                                          int parID, 
                                          byte[] pName, 
                                          String newAlias, 
                                          int creator, 
                                          int flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nGetVolumeName"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nGetVolumeName(int, byte[])">nGetVolumeName</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nGetVolumeName(int vRef, 
                                            byte[] pName) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nResolveAlias"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nResolveAlias(int, int, byte[], int[], byte[], int)">nResolveAlias</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nResolveAlias(int inVRef, 
                                           int inParID, 
                                           byte[] pInName, 
                                           int[] outVRefAndParID, 
                                           byte[] pOutName, 
                                           int flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nSetColorCoding"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nSetColorCoding(int, int, byte[], int)">nSetColorCoding</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nSetColorCoding(int vRef, 
                                             int parID, 
                                             byte[] pName, 
                                             int newCoding) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nSetVolumeColorCoding"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nSetVolumeColorCoding(int, int)">nSetVolumeColorCoding</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nSetVolumeColorCoding(int vRef, 
                                                   int newCoding) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nGetVolumeFinderInfo"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nGetVolumeFinderInfo(int, int[])">nGetVolumeFinderInfo</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nGetVolumeFinderInfo(int vRef, 
                                                  int[] finfo) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nGetVolumeIconSuite"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nGetVolumeIconSuite(int, int, int[])">nGetVolumeIconSuite</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nGetVolumeIconSuite(int vRef, 
                                                 int selector, 
                                                 int[] pHSuite) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nGetFileIconSuite"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nGetFileIconSuite(int, int, byte[], int, int[])">nGetFileIconSuite</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nGetFileIconSuite(int vRef, 
                                               int parID, 
                                               byte[] pName, 
                                               int selector, 
                                               int[] pHSuite) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nGetFTACIconSuite"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nGetFTACIconSuite(int, int, int, int, int[])">nGetFTACIconSuite</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nGetFTACIconSuite(int vRef, 
                                               int creator, 
                                               int type, 
                                               int selector, 
                                               int[] pHSuite) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nPlotIcon"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nPlotIcon(int, int, int, int, int, int, int[])">nPlotIcon</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nPlotIcon(int which, 
                                       int width, 
                                       int height, 
                                       int hSuite, 
                                       int xform, 
                                       int align, 
                                       int[] pData) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nCreateVolumeAlias"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nCreateVolumeAlias(int, java.lang.String, int, int)">nCreateVolumeAlias</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nCreateVolumeAlias(int targetVRef, 
                                                String newAlias, 
                                                int creator, 
                                                int flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nIterateContents"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nIterateContents(int, int, byte[], int[], int[], byte[], int, int)">nIterateContents</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nIterateContents(int vRef, 
                                              int parID, 
                                              byte[] pName, 
                                              int[] dirIDArray, 
                                              int[] numRet, 
                                              byte[] buffer, 
                                              int numEntries, 
                                              int flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nIVC"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nIVC(int, int[], int[], byte[], int, int)">nIVC</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nIVC(int vRef, 
                                  int[] dirIDArray, 
                                  int[] numRet, 
                                  byte[] buffer, 
                                  int numEntries, 
                                  int flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nGetContainer"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nGetContainer(int, int, byte[], int[], byte[])">nGetContainer</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nGetContainer(int vRef, 
                                           int parID, 
                                           byte[] pName, 
                                           int[] pContParID, 
                                           byte[] pContName) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nDisposeIconSuite"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nDisposeIconSuite(int, int)">nDisposeIconSuite</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nDisposeIconSuite(int hSuite, 
                                               int flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nGetAllMonitorInfo"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nGetAllMonitorInfo(int[], int, int[])">nGetAllMonitorInfo</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nGetAllMonitorInfo(int[] monitorInfo, 
                                                int maxToReturn, 
                                                int[] numReturned) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nGetMainMonitorInfo"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nGetMainMonitorInfo(int[])">nGetMainMonitorInfo</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nGetMainMonitorInfo(int[] monitorInfo) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nGetProcesses"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nGetProcesses(int, int, int[], int[], int[], byte[], int[], int[], int[])">nGetProcesses</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nGetProcesses(int maxToReturn, 
                                           int flags, 
                                           int[] numRet, 
                                           int[] vRefs, 
                                           int[] parIDs, 
                                           byte[] pNames, 
                                           int[] psnLo, 
                                           int[] psnHi, 
                                           int[] proFlags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nSetCreatorAndType"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nSetCreatorAndType(int, int, byte[], int[])">nSetCreatorAndType</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nSetCreatorAndType(int vRef, 
                                                int parID, 
                                                byte[] pName, 
                                                int[] creatorAndType) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="testLink"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="testLink()">testLink</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static void testLink() </PRE>
<BLOCKQUOTE>
<DL>
<P>
Calls each of the native methods with invalid arguments. Used to test if there are link problems.
<P>
</DL>
</BLOCKQUOTE> <BR>


<HR SIZE=1 ALIGN=left WIDTH="98%">
<PRE>
<A HREF="packages.htm">All Packages</A>  <A HREF="pak-545a.htm">This Package</A>  <A HREF="tree.htm">Class Hierarchy</A>  <A HREF="search.htm">Class Search</A>  <A HREF="index.htm">Index</A>
</PRE>
<FONT FACE="Arial,Helvetica" SIZE=-2>
Freshly brewed Java API Documentation automatically generated with <A HREF="http://www.ualberta.ca/~tgee/polardoc">polardoc</A> Version 1.0.7
<BR>
</FONT>
</BODY>
</HTML>
