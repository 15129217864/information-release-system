<!-- Automatically generated with polardoc Version 1.0.7 on Fri Aug 23 12:32:12 PDT 2002 -->
<!-- com.jconfig.win.CommandLineUtilsMSVM | Do not remove or edit this line! -->
<HTML>
<HEAD>
<TITLE>
  Class com.jconfig.win.CommandLineUtilsMSVM
</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF" LINK="#0000FF" VLINK="#0000FF" ALINK="#0000FF">
<BR>
<P>

<TABLE WIDTH="100%" BGCOLOR="#FFFFBB"><TR><TD WIDTH="100%">

<B>
<A HREF="../../../readme.html"><FONT SIZE="2">Main Page</FONT></A>

<BR>
&nbsp; &nbsp; <A HREF="../../../overview.html"><FONT SIZE="2">Cookbook/Overview</FONT></A>

&nbsp; &nbsp; <A HREF="../../../imagemeister.html"><FONT SIZE="2">ImageMeister</FONT></A>

&nbsp; &nbsp; <A HREF="../../../jcprops.html"><FONT SIZE="2">the jcprops file</FONT></A>

&nbsp; &nbsp; <A HREF="../../../licensing.html"><FONT SIZE="2">Licensing</FONT></A>

<BR>
</B><I>
&nbsp; &nbsp; <FONT SIZE="2">Binary Installation & Configuration</FONT></I><B> 
[
<A HREF="../../../wininfo.html"><FONT SIZE="2">Win</FONT></A> &middot; 
<A HREF="../../../macinfo.html"><FONT SIZE="2">Mac</FONT></A> &middot; 
<A HREF="../../../nixinfo.html"><FONT SIZE="2">Nix</FONT></A> &middot;
<A HREF="../../../osxinfo.html"><FONT SIZE="2">OSX</FONT></A> 
]

&nbsp; &nbsp; <A HREF="../../../changes.html"><FONT SIZE="2">Changes</FONT></A>


<BR>
&nbsp; &nbsp; <A HREF="../../../docs/pak-76b1.htm"><FONT SIZE="2">Public API</FONT></A>

<BR>
&nbsp; &nbsp; <A HREF="../../readme.html"><FONT SIZE="2">Source Code Main Page</FONT></A>

<BR>
</B><I>
&nbsp; &nbsp; &nbsp; &nbsp; <FONT SIZE="2">Java</FONT></I><B> 
[
<A HREF="pak-76b1.htm"><FONT SIZE="2">Common</FONT></A> &middot; 
<A HREF="pak-bd9a.htm"><FONT SIZE="2">Win</FONT></A> &middot; 
<A HREF="pak-545a.htm"><FONT SIZE="2">Mac</FONT></A> &middot; 
<A HREF="pak-c96f.htm"><FONT SIZE="2">Nix</FONT></A> 
]

</B><I>
&nbsp; &nbsp; <FONT SIZE="2">Native Code</FONT></I><B>
[
<A HREF="../cdocs/common/Common.html"><FONT SIZE="2">Common</FONT></A> &middot; 
<A HREF="../cdocs/win/Windows.html"><FONT SIZE="2">Win</FONT></A> &middot; 
<A HREF="../cdocs/mac/Mac.html"><FONT SIZE="2">Mac</FONT></A> &middot; 
<A HREF="../cdocs/nix/Linux.html"><FONT SIZE="2">Nix</FONT></A>
]

&nbsp; &nbsp; <A HREF="../manifest.html"><FONT SIZE="2">Manifest</FONT></A>

<BR>
</B><I>
&nbsp; &nbsp; &nbsp; &nbsp; <FONT SIZE="2">Native Code Overviews</FONT></I><B>
[
<A HREF="../commonnative.html"><FONT SIZE="2">Common</FONT></A> &middot; 
<A HREF="../winnative.html"><FONT SIZE="2">Win</FONT></A> &middot; 
<A HREF="../macnative.html"><FONT SIZE="2">Mac</FONT></A> &middot; 
<A HREF="../nixnative.html"><FONT SIZE="2">Nix</FONT></A> &middot; 
<A HREF="../strings.html"><FONT SIZE="2">Strings</FONT></A> 
]

</B><I>
&nbsp; &nbsp; <FONT SIZE="2">Macros</FONT></I><B>
[
<A HREF="../macros.html"><FONT SIZE="2">General</FONT></A> &middot; 
<A HREF="../nativemacros.html"><FONT SIZE="2">Native Macros</FONT></A> 
]

<BR>
</B><I>
&nbsp; &nbsp; &nbsp; &nbsp; <FONT SIZE="2">Walkthroughs</FONT></I><B> 
[
<A HREF="../overview_init.html"><FONT SIZE="2">Java only</FONT></A> &middot; 
<A HREF="../overview_monitors.html"><FONT SIZE="2">Java and native</FONT></A> 
]

</B><I>
&nbsp; &nbsp; <FONT SIZE="2">Building</FONT></I><B> 
[
<A HREF="../wininstall.html"><FONT SIZE="2">Win</FONT></A> &middot; 
<A HREF="../macinstall.html"><FONT SIZE="2">Mac</FONT></A> &middot; 
<A HREF="../nixinstall.html"><FONT SIZE="2">Nix</FONT></A> &middot; 
<A HREF="../osxinstall.html"><FONT SIZE="2">OSX</FONT></A> 
]

&nbsp; &nbsp; <A HREF="../distribution.html"><FONT SIZE="2">Distribution Issues</FONT></A>

<BR>

</TD></TR></TABLE>





<A NAME="_top_"></A>
<PRE>
<A HREF="packages.htm">All Packages</A>  <A HREF="pak-bd9a.htm">This Package</A>  <A HREF="tree.htm">Class Hierarchy</A>  <A HREF="search.htm">Class Search</A>  <A HREF="index.htm">Index</A>
</PRE>
<HR SIZE=1 ALIGN=left WIDTH="98%">
<B><FONT FACE="Arial,Helvetica" SIZE=+2>
     Class com.jconfig.win.CommandLineUtilsMSVM
</FONT></B>
<PRE>
java.lang.Object
   |
   +----com.jconfig.win.CommandLineUtilsMSVM
</PRE>
<P><TABLE BGCOLOR="#00ccff" WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD><FONT FACE="arial,helvetica" SIZE=+1><B>&nbsp;&nbsp;Summary</B></FONT></TD> </TR> </TABLE>
<A NAME="_Summary_"></A>
<PRE>
class  <STRONG>CommandLineUtilsMSVM</STRONG>
     extends java.lang.Object
{
          // Fields 4
     private static final String <A HREF="#copyrightString">copyrightString</A>;
     private static final int <A HREF="#kMaxReturns">kMaxReturns</A>;
     private static final String[] <A HREF="#noQ">noQ</A>;
     private static final String[] <A HREF="#withQ">withQ</A>;

          // Constructors 1
     private <A HREF="#CommandLineUtilsMSVM()">CommandLineUtilsMSVM</A>();

          // Methods 11
     private static String <A HREF="#addQuotesToLongFileNames(java.lang.String)">addQuotesToLongFileNames</A>(String);
     static String <A HREF="#createCommandLine(java.lang.String, java.util.Vector)">createCommandLine</A>(String, Vector);
     static RegCommandMSVM[] <A HREF="#findVerbs(java.lang.String, java.lang.String)">findVerbs</A>(String, String);
     static Vector <A HREF="#findVerbs(java.lang.String[])">findVerbs</A>(String[]);
     private static RegCommandMSVM[] <A HREF="#makeRegCommandArray(java.lang.String[], int, int)">makeRegCommandArray</A>(String[], int, int);
     private static String <A HREF="#meldCommandLine(java.util.Vector, java.util.Vector)">meldCommandLine</A>(Vector, Vector);
     private static String <A HREF="#popAllArgs(java.util.Vector, java.lang.String)">popAllArgs</A>(Vector, String);
     private static String <A HREF="#popAllSplits(java.util.Vector, java.lang.String)">popAllSplits</A>(Vector, String);
     private static String <A HREF="#popOneArg(java.util.Vector, java.lang.String)">popOneArg</A>(Vector, String);
     private static String <A HREF="#popOneSplit(java.util.Vector, java.lang.String)">popOneSplit</A>(Vector, String);
     private static void <A HREF="#splitCommandLine(java.lang.String, int, java.util.Vector)">splitCommandLine</A>(String, int, Vector);

}
</PRE>
<P>
<DL>
<P>
A singleton used to deal with command lines.

<P>
findVerbs() gets the VATs of an application.

<P>
createCommandLine() creates a command line from a command line template
and a series of arguments.
<P>
<DT><B>Author:</B>
<DD>
Copyright (c) 1997-2002 Samizdat Productions. All Rights Reserved.

</DL>
<P>
<BR><BR>
<BR><TABLE BGCOLOR="#00ccff" WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD><FONT FACE="arial,helvetica" SIZE=+1><B>&nbsp;&nbsp;Fields</B></FONT></TD> </TR> </TABLE>
<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="copyrightString"><FONT COLOR="#0000FF">&middot;</FONT> copyrightString</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static final String copyrightString
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kMaxReturns"><FONT COLOR="#0000FF">&middot;</FONT> kMaxReturns</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static final int kMaxReturns
</PRE>
<BLOCKQUOTE>
<P>
See the 'findVerbs' method.
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="noQ"><FONT COLOR="#0000FF">&middot;</FONT> noQ</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static final String[] noQ
</PRE>
<BLOCKQUOTE>
<P>
Used by 'splitCommandLine'
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="withQ"><FONT COLOR="#0000FF">&middot;</FONT> withQ</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static final String[] withQ
</PRE>
<BLOCKQUOTE>
<P>
Used by 'splitCommandLine'
<P>
<P> </BLOCKQUOTE>

<P>

<BR><TABLE BGCOLOR="#00ccff" WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD><FONT FACE="arial,helvetica" SIZE=+1><B>&nbsp;&nbsp;Constructors</B></FONT></TD> </TR> </TABLE>
<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="CommandLineUtilsMSVM"><FONT COLOR="#FFCC00">&middot;</FONT></A>
<A NAME="CommandLineUtilsMSVM()">CommandLineUtilsMSVM</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private CommandLineUtilsMSVM() </PRE>
<BLOCKQUOTE>
</BLOCKQUOTE> <BR>


<BR><TABLE BGCOLOR="#00ccff" WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD><FONT FACE="arial,helvetica" SIZE=+1><B>&nbsp;&nbsp;Methods</B></FONT></TD> </TR> </TABLE>
<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="findVerbs"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="findVerbs(java.lang.String[])">findVerbs</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static Vector findVerbs(String[] fullPaths) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Find the VATs of an array of files.
See 'RegCommandMSVM.java' for a description of the VAT format.
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> fullPaths</I></TD> <TD>the full paths of the application "c:\windows\notepad.exe"</TD></TR>
</TABLE><P>
<DT> <B>Returns:</B>
<DD> each object in the return Vector is an array of RegCommandMSVM objects,
in the same order as the input file names
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="findVerbs"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="findVerbs(java.lang.String, java.lang.String)">findVerbs</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static <A HREF="pow0a7a1.htm">RegCommandMSVM</A>[] findVerbs(String fullPath, 
                                     String fileName) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Find the VATs of a given file.
See 'RegCommandMSVM.java' for a description of the VAT format.
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> fullPath</I></TD> <TD>the full path of the application "c:\windows\notepad.exe"</TD></TR>
<TR VALIGN=TOP> <TD><I> fileName</I></TD> <TD>the name of the app "notepad.exe"</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="makeRegCommandArray"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="makeRegCommandArray(java.lang.String[], int, int)">makeRegCommandArray</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static <A HREF="pow0a7a1.htm">RegCommandMSVM</A>[] makeRegCommandArray(String[] qs, 
                                                       int startIndex, 
                                                       int numVats) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="createCommandLine"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="createCommandLine(java.lang.String, java.util.Vector)">createCommandLine</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static String createCommandLine(String template, 
                                   Vector argVector) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Create a command line from a Registry-style command line template and a Vector of arguments
Each argument placeholder ("%1", etc.) will be replaced with one of the arguments
Unused placeholders will be removed
Excess arguments will be added after the last placeholder, or at the end of the command line
Arguments which contains spaces will be surrounded with quotes.
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> template</I></TD> <TD>the command line template, e.g., "c:\windows\notepad.exe %1 /p %2"</TD></TR>
<TR VALIGN=TOP> <TD><I> argVector</I></TD> <TD>contains the list of arguments, may have zero or more elements</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="splitCommandLine"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="splitCommandLine(java.lang.String, int, java.util.Vector)">splitCommandLine</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static void splitCommandLine(String s, 
                                        int argNum, 
                                        Vector vec) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Splits a command line into one or more segments. Each split occurs at the location of an argument
placeholder: %1 or "%1", %2 or "%2", etc. Each segment is appended to 'vec'

<P>
After calling this method, call 'meldCommandLine' with a Vector containing the arguments, which
will be melded into the command line.

<PRE>
For instance, "c:\windows\notepad.exe %1 -d %2" will be split into three strings:
	"c:\windows\notepad.exe "
	" -d "
	""
</PRE>
<P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="meldCommandLine"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="meldCommandLine(java.util.Vector, java.util.Vector)">meldCommandLine</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static String meldCommandLine(Vector splits, 
                                         Vector args) </PRE>
<BLOCKQUOTE>
<DL>
<P>
'splits' contains the vector of command line segments from 'splitCommandLine'
fold these together with the command line arguments in 'args'
<P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="popOneSplit"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="popOneSplit(java.util.Vector, java.lang.String)">popOneSplit</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static String popOneSplit(Vector splits, 
                                     String s) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="popAllSplits"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="popAllSplits(java.util.Vector, java.lang.String)">popAllSplits</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static String popAllSplits(Vector splits, 
                                      String s) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="popOneArg"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="popOneArg(java.util.Vector, java.lang.String)">popOneArg</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static String popOneArg(Vector args, 
                                   String s) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="popAllArgs"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="popAllArgs(java.util.Vector, java.lang.String)">popAllArgs</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static String popAllArgs(Vector args, 
                                    String s) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="addQuotesToLongFileNames"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="addQuotesToLongFileNames(java.lang.String)">addQuotesToLongFileNames</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static String addQuotesToLongFileNames(String s) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>


<HR SIZE=1 ALIGN=left WIDTH="98%">
<PRE>
<A HREF="packages.htm">All Packages</A>  <A HREF="pak-bd9a.htm">This Package</A>  <A HREF="tree.htm">Class Hierarchy</A>  <A HREF="search.htm">Class Search</A>  <A HREF="index.htm">Index</A>
</PRE>
<FONT FACE="Arial,Helvetica" SIZE=-2>
Freshly brewed Java API Documentation automatically generated with <A HREF="http://www.ualberta.ca/~tgee/polardoc">polardoc</A> Version 1.0.7
<BR>
</FONT>
</BODY>
</HTML>
