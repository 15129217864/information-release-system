/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.xct.cms.action;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.sql.Connection;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.xct.cms.dao.LogsDAO;
import com.xct.cms.dao.ProgramHistoryDAO;
import com.xct.cms.dao.TerminalDAO;
import com.xct.cms.dao.UsersDAO;
import com.xct.cms.db.DBConnection;
import com.xct.cms.domin.Terminal;
import com.xct.cms.domin.Users;
import com.xct.cms.servlet.SessionListener;
import com.xct.cms.utils.DESPlusUtil;
import com.xct.cms.utils.StringMD5Util;
import com.xct.cms.utils.UtilDAO;
import com.rsa.util.RSACoder;
import com.rsa.util.RSAUtils;

public class LoginAction extends Action {
	
	Logger logger = Logger.getLogger(LoginAction.class);
	//局域网同一网段获取MAC地址
  public static String getMacFromNet(String ip){
		
		String str = "";   
		String macAddress = "";   
		try {
		    Process p = Runtime.getRuntime().exec(new StringBuffer().append("nbtstat -A ").append( ip).toString());   
		    InputStreamReader ir = new InputStreamReader(p.getInputStream());   
		    LineNumberReader input = new LineNumberReader(ir);   
		    for (int i = 1; i < 100; i++) {
		        str = input.readLine();  
//		        System.out.println(str);
		        if (str != null) {   
		            if (str.indexOf("MAC Address") > 1) {   
		                macAddress = str.substring(str.indexOf("MAC Address") + 14, str.length());   
		                break;   
		            }   
		        }   
		    }   
		} catch (IOException e) {   
		    e.printStackTrace(System.out);   
		}   
		return macAddress;   
	}
	
  public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
	  
	  String initdo=request.getParameter("initdo");
	  if(null!=initdo){
		  request.getSession().setAttribute("logintoken",
				  StringMD5Util.getMD5String(new StringBuffer().append("cMsFoRm_ToKeN_").append(UUID.randomUUID().toString()).toString()));
		  try {
			 request.setAttribute("publickey", RSAUtils.PUBLICKEY);
		  } catch (Exception e) {
			 e.printStackTrace();
		  }
		  return mapping.findForward("loginError");
	  }
    return doLogin( mapping,  form,request,  response);
 }

	public ActionForward doLogin(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		 
		 String logintoken=request.getParameter("logintoken");
		 
		 if(null==logintoken||"".equals(logintoken)){
			 logger.info("******logintoken 为null，重新登录！********");
			  request.setAttribute("logininfo", "令牌没找到,请重新登陆!");
			 request.setAttribute("loginstate", "loginerror");
			 return mapping.findForward("relogin");
		 }
	     if(null==request.getSession().getAttribute("logintoken")){
			 logger.info("******Session logintoken 为null，重新登录！********");
			  request.setAttribute("logininfo", "Session过期,请重新登陆!");
			 request.setAttribute("loginstate", "loginerror");
			 return mapping.findForward("relogin");
		 }
		 if(!request.getSession().getAttribute("logintoken").toString().equals(request.getParameter("logintoken"))){
			 logger.info("******logintoken不对，重新登录！********");
			  request.setAttribute("logininfo", "令牌不对,请重新登陆!");
			 request.setAttribute("loginstate", "loginerror");
			 request.getSession().removeAttribute("logintoken");
			 return mapping.findForward("relogin");
		 }
		 //-----------------------------------------------------------------------------------------------------------
		 String publickey=request.getParameter("publickey");
		 if(null==publickey||publickey.equals("")||publickey.equals("null")||!publickey.equals(RSAUtils.PUBLICKEY)){
			 logger.info("******密钥不对，重新登录！********");
			 request.getSession().removeAttribute("logintoken");
			  request.setAttribute("logininfo", "公钥不对,请重新登陆!");
			 request.setAttribute("loginstate", "loginerror");
			 return mapping.findForward("relogin");
		 }
		 
		 request.getSession().removeAttribute("logintoken");
		
		 //==========================================================================
		 
		 String lg_name=request.getParameter("uid")==null?"":request.getParameter("uid");
		 String lg_password=request.getParameter("upwd")==null?"":request.getParameter("upwd");
		 String broswer=request.getParameter("broswerflag")==null?"ie":request.getParameter("broswerflag");
		 
		 String cmd="";
		 
//		 String homepath=FirstStartServlet.projectpath;
		 
		 int registerid=UtilDAO.checkkey(); //获取授权码状态值;
		 
//		 System.out.println("----------授权码状态--------->"+registerid);
		 
//         Dog dog=new Dog();//联合利华，迪士尼 64位win2008系统，不支持32位加密狗驱动
//         String string=dog.isErrorDogPassword(homepath+"/xct.key");
//         System.out.println("---->"+dog.DogValueIsRight());
         
//		 String remoteaddress=request.getRemoteAddr();
         
         if(registerid==3){
    	 	 request.setAttribute("logininfo", "软件已过有效期，请联系供应商或输入授权密钥！");
			 request.setAttribute("loginstate", "loginerror");
			 request.setAttribute("regint", "3");
			 cmd="loginError";
         }else if(registerid==1){
//             if(dog.isInsertDog()){ if(dog.DogValueIsRight().startsWith(string)){ /////验证加密狗
			    if(true){ if(true){   ///不验证加密狗
			    	 long longtemp=UtilDAO.remainDay();
//			    	 System.out.println("longtemp--------------"+longtemp);
			    	 if(longtemp>=0&&longtemp<=10){
	 		 		    request.setAttribute("loginedinfo", longtemp);
			    	 }
			    		 
//	 				System.out.println(dog.getDogNo());//加密狗流水号
	 				if(!"".equals(lg_name)&&!"".equals(lg_password)){
	 					//==================================================
	 					try {
	 						byte[] uidbyte=RSACoder.decryptByPrivateKey(lg_name, RSAUtils.PRIVATEKEY);
							byte[] pwdbyte=RSACoder.decryptByPrivateKey(lg_password, RSAUtils.PRIVATEKEY);
							lg_name=new String(uidbyte);
							lg_password=new String(pwdbyte);
						} catch (Exception e1) {
							e1.printStackTrace();
						}
	 					//==================================================
	 					
	 					UsersDAO userdao= new UsersDAO();
	 					String md5password=StringMD5Util.getMD5String(lg_password); 
	 					Users lg_user=userdao.login(lg_name, md5password);
	 					HttpSession session=request.getSession();
	 					
	 					if(lg_user!=null){
	 					    System.gc();
	 					    
	 						String cnt_ip=request.getRemoteAddr();
	 						lg_user.setLogin_ip(cnt_ip);
	 						session.setAttribute("lg_user", lg_user);
	 						session.setAttribute("browser", broswer);
	
	 						Map<Integer,Terminal> zu_map=TerminalDAO.getZuListByUsername(lg_name); ////获取登录用户的所有终端组信息
	 						session.setAttribute("user_cnt_zu_map", zu_map);
	 						
	 						DBConnection dbc=new DBConnection();
	 						Connection conn= dbc.getConection();
	 						session.setAttribute("lg_authority", lg_user.getAuthority());
	 						String []client={"A","B","C","D","E","F","G","H","I"};
	 						int itmp=0,itemp2=0,itemp3=0,itemp4=0;
	 						if(null!=lg_user.getAuthority()){
		 						String [] authority=lg_user.getAuthority().split("#");
		 						for(int i=0,n=authority.length;i<n;i++){
		 							for(int j=0,m=client.length;j<m;j++){
		 								if(client[j].equals(authority[i])){
		 									 ++itmp;
		 								}
		 							}
		 						}
		 						for(int i=0,n=authority.length;i<n;i++){
		 							if(authority[i].equals("L")||authority[i].equals("M")){
		 								++itemp2;
		 							}
		 						}
		 						for(int i=0,n=authority.length;i<n;i++){
		 							if(authority[i].equals("N")||authority[i].equals("O")){
		 								++itemp3;
		 							}
		 						}
		 						for(int i=0,n=authority.length;i<n;i++){
		 							if(authority[i].equals("Q")||authority[i].equals("R")||authority[i].equals("S")){
		 								++itemp4;
		 							}
		 						}
//		 						System.out.println("itemp2------------->"+itemp2);
		 						session.setAttribute("clientitmp", itmp*114);
		 						session.setAttribute("clientitmp2", itemp2*114);
		 						session.setAttribute("clientitmp3", itemp3*114);
		 						session.setAttribute("clientitmp4", itemp4*114);
		 						SessionListener.isAlreadyEnter(session, lg_user.getLg_name(), lg_user);
	 						}
	 						request.setAttribute("islogin", "yes");
	 						try {
	 							//为了单点登录到会议预订系统
								session.setAttribute("meetingpassword", DESPlusUtil.Get().encrypt(lg_password));
							} catch (Exception e) {
								e.printStackTrace();
							}
	 						
	 						new ProgramHistoryDAO().deleteExpiredProgram(conn);///删除节目单十天以前的数据
	 						new LogsDAO().addlogs1(conn,lg_user.getName(),new StringBuffer().append("用户【").append(lg_user.getName()).append("】登陆系统！登录IP为：").append(cnt_ip).toString(),1);
	 						/////关闭数据库链接
		 					dbc.returnResources(conn);
		 					
	 						cmd="loginOk";
	 					}else{ 
	 						request.setAttribute("logininfo", "用户名或密码错误，请确认！");
	 						request.setAttribute("loginstate", "loginerror");
	 						cmd="loginError";
	 					}
	 				}else{
	 					request.setAttribute("logininfo", "用户名或密码为空，请确认！");
 						request.setAttribute("loginstate", "loginerror");
	 					cmd="loginError";
	 				}
	 			}else{
	 				request.setAttribute("loginstate", "loginerror");
	 				request.setAttribute("logininfo", "加密狗密码不对！请联系供应商！");//加密狗密码不对！请联系供应商！
	 				cmd="loginError";
	 			}
			  }else{
				  request.setAttribute("loginstate", "loginerror");
				  request.setAttribute("logininfo","没找到加密狗，请重新插入加密狗，或重装加密狗驱动！");//没找到加密狗，请重新插入加密狗，或重装加密狗驱动！
				  cmd="loginError";	 
			  }
		}else{
			request.setAttribute("logininfo", "授权码读取失败，请重新输入授权码 或者 联系供应商！");
			request.setAttribute("loginstate", "loginerror");
			request.setAttribute("regint", "3");
			cmd="loginError";
		}
		
		return mapping.findForward(cmd);
	}
}