/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.xct.cms.xy.action;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.xct.cms.db.DBConnection;
import com.xct.cms.servlet.FirstStartServlet;
import com.xct.cms.utils.CreatMacXmlUtils;
import com.xct.cms.utils.URLGetPost;
import com.xct.cms.utils.Util;
import com.xct.cms.utils.UtilDAO;
import com.xct.cms.xy.dao.CntResponseDAO;
import com.xct.cms.xy.dao.ManagerProjectDao;
import com.xct.cms.xy.domain.ClientIpAddress;
import com.xct.cms.xy.domain.CntResponse;
import com.xct.cms.xy.domain.ProjectMenuBean;

public class DownloadStatusAction extends Action {
	
	private String http="http://";

	private String reqstring="/NoticeToClientOparator";
	
	
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		HttpSession session=request.getSession();
		PrintWriter out = response.getWriter();
		ManagerProjectDao managerprojectdao=new ManagerProjectDao(); 
		CntResponseDAO  cntresponsedao=new CntResponseDAO();
		CreatMacXmlUtils creatmacxmlutils=new CreatMacXmlUtils();
		URLGetPost urlgetpost=new URLGetPost();
		
//		if(null==session.getAttribute("nodownlist")){
//			List<String> nodownlist=new ArrayList<String>();
//			session.setAttribute("nodownlist", nodownlist);
//		}
		
		ProjectMenuBean projectmenubean=(ProjectMenuBean)session.getAttribute("projectmenu");
			
		if(null!=projectmenubean){
			
				String playname=projectmenubean.getPlayname();//节目名称
				String projectdirectory=projectmenubean.getProjectderitory();//节目文件夹
				String playtype=projectmenubean.getPlaytype();//播放类型
				int type=0; // 定时循环
				if(playtype.equals("insert"))
					type=1; //插播
				else if(playtype.equals("active"))
					type=2; //定时
				else if(playtype.equals("defaultloop")){
					//playtype="loop"; //永久循环
				    type=3;
				}
				String setstartdate=projectmenubean.getSetstartdate();    //yyyy-MM-dd
				String startdate=projectmenubean.getStartdate();//开始时间   yyyy-MM-dd HH:mm:ss 格式
				String enddate=projectmenubean.getEnddate();//结束时间        yyyy-MM-dd HH:mm:ss 格式
				String setenddate=projectmenubean.getSetenddate();        //yyyy-MM-dd
				String timecount="100";//projectmenubean.getTimecount();//播放几分钟
				List<ClientIpAddress> allip=projectmenubean.getList();//发送到终端的 IP 
				int allipsize=allip.size();
				int catchcount=Integer.parseInt(null==request.getParameter("catchcount")?allipsize+"":request.getParameter("catchcount"));
//				/////System.out.println("catchcount----------------> "+catchcount);
				StringBuffer result= new StringBuffer("{");
				DBConnection dbc=new DBConnection();
				Connection conn = dbc.getConection();
				
				if(catchcount<allipsize){
					for(int i=0,n=allipsize;i<n;i++){// 请求客户端 tomcat
							ClientIpAddress clientipaddress=allip.get(i);
							String ip=clientipaddress.getCntip();
							
							if(managerprojectdao.getClientProect(conn,startdate,ip)==0){//查询数据库是否有此记录，把查询定在第一条
	//						     生成节目单 MAC.xml
								File macxmlfile= new File(System.getProperty("MAC_HOME")+clientipaddress.getCntmac()+".xml");
								if(macxmlfile.exists()){//只生成一天的节目单
								   creatmacxmlutils.addProjectMacXml(macxmlfile.getPath(), playname, projectdirectory, startdate, setstartdate+" "+enddate .split(" ")[1], playtype, timecount);
								}else{//只生成一天的节目单
								   creatmacxmlutils.createProjectMacXml(macxmlfile.getPath(),clientipaddress.getCntmac(),1111, playname, projectdirectory, startdate, setstartdate+" "+enddate .split(" ")[1],type, timecount);
								} 
	//							 上传到ftp目录下，待做
								String url=http+ip+System.getProperty("CLENTPORT_HOME")+reqstring;
								if(urlgetpost.sendGet(url, "op=xu0009")){
									//managerprojectdao.insertProjectParm(conn,1111,projectdirectory, playname,setstartdate, startdate, enddate,setenddate, timecount, type, ip, clientipaddress.getCntmac(),1);
								    result.append("'"+ip+"':'请求成功'");
								}else{
									result.append("'"+ip+"':'请求失败'");
								}
							}
						break;
					}
				}
				////关闭数据库链接
				dbc.returnResources(conn);
				//////////////
				result.append("}");
				out.println(result.toString());//将结果写入响应体
				out.flush();
				out.close();
				
				Thread.sleep(1000);
				
				StringBuffer resultfromdb= new StringBuffer("{");
				
				if(null==session.getAttribute("resultcount")||catchcount==0)
					 session.setAttribute("resultcount", 0);
				
				if(Integer.parseInt(session.getAttribute("resultcount").toString())<allipsize){
				
					if(null!=session.getAttribute("resultcount")){  
						int temp=Integer.parseInt(session.getAttribute("resultcount").toString());
						session.setAttribute("resultcount",temp+1);
					}
					UtilDAO utildao= new  UtilDAO();
					for(int j=0,m=allip.size();j<m;j++){
						String ip=allip.get(j).getCntip();
						CntResponse cntresponse=cntresponsedao.getNewCmd(ip,"xu0009");
					      if(null!=cntresponse){
							String downloadstatus=cntresponse.getCnt_cmdstatus();//得到返回结果
							
							if(null!=downloadstatus&&!"".equals(downloadstatus)){
								if(downloadstatus.equals("xu0009_OK")){
										downloadstatus="下载成功";
								}else if(downloadstatus.equals("xu0009_ERROR")){
										downloadstatus="客户端可能在下载或者休眠";
								}else if(downloadstatus.equals("xu0009_ERROR_PROJECT")){
								    	downloadstatus="节目下载不完整，可能是网络和断电导致的错误";
								}else if(downloadstatus.equals("xu0009_NO_MAC_XML")){
								    	downloadstatus="没找到MAC配置文件";
								}else if(downloadstatus.equals("xu0009_MAC_XML_ERROR")){
								    	downloadstatus="MAC配置文件有错";
								}else if(downloadstatus.equals("xu0009_timeout")){
								    	downloadstatus="时间不对 或 超时";
								}else if(downloadstatus.equals("xu0009_ftpclose")){
								    	downloadstatus="ftp配置错误或者ftp服务关闭了";
								}
								resultfromdb.append("'"+ip+"':'"+downloadstatus+"'");
								utildao.deleteinfo("cnt_ip", ip, "xct_cnt_response");
							}
					    }
					}
				}
				resultfromdb.append("}");
				out.println(resultfromdb.toString());//将结果写入响应体
				out.flush();
				out.close();
		    }
		  return null;
	  }
}