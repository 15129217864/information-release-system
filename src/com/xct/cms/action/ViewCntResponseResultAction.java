/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.xct.cms.action;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.xct.cms.dao.CntResponseDAO;
import com.xct.cms.dao.TerminalDAO;
import com.xct.cms.domin.CntResponse;
import com.xct.cms.domin.ProgramHistory;
import com.xct.cms.domin.Terminal;
import com.xct.cms.utils.DateUtils;
import com.xct.cms.utils.ProgramListCompareter;
import com.xct.cms.utils.UtilDAO;

/** 
 * MyEclipse Struts
 * Creation date: 08-26-2010
 * 
 * XDoclet definition:
 * @struts.action scope="request" validate="true"
 */
public class ViewCntResponseResultAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		String cmd=request.getAttribute("cmd").toString();
		String opp=request.getAttribute("opp").toString();
		String resips=request.getAttribute("resips").toString();
		String cntmac=request.getAttribute("cntmac").toString();
		String programName=request.getAttribute("programName").toString();
		String resip[]=resips.split("!");
		
		if("GUICAMERA".equals(cmd)){
			
//			UtilDAO utildao=new UtilDAO();
			UtilDAO.sleep(2000);
			request.setAttribute("cntmac", cntmac);
			request.setAttribute("resip", resip[1]);
			
		}else if("VIEWPROJECTMENU".equals(cmd)){
//			/////System.out.println("resips------> "+resips);
//			UtilDAO utildao=new UtilDAO();
			CntResponseDAO cntresponsedao= new CntResponseDAO();
			UtilDAO.sleep(1000);
			CntResponse cntresponse= cntresponsedao.getNewCmd(resip[1],opp);
			if(cntresponse!=null){
				
				String projectmenus=cntresponse.getCnt_cmdresult();
				
				if("default".equals(projectmenus)){
					request.setAttribute("defaultprograme", "default");
				}else if(projectmenus!=null){
					
//					获取当前播放的节目详细
					String playclientstring="";
					List <Terminal>listplaystring=new TerminalDAO().getALLTerminalDAO(new StringBuffer().append(" where cnt_ip='").append(resip[1]).append("'").toString());
							
					if(null!=listplaystring&&!listplaystring.isEmpty()){
						playclientstring=listplaystring.get(0).getCnt_playprojecttring();
						request.setAttribute("playclientstring",playclientstring);
					}
					List<ProgramHistory> list = new ArrayList<ProgramHistory>();
					String menuname[]=projectmenus.replace("$$$", "!!!").split("!!!");
					for(int i=0;i<menuname.length;i++){
						
						ProgramHistory program= new ProgramHistory();
						String[] menus=menuname[i].split("#");
						program.setProgram_Name(menus[0].replace(" ", ""));
						program.setProgram_JMurl(menus[1]);
						program.setProgram_SetDate(menus[2]);
						program.setProgram_type(menus[3]);
						program.setProgram_long(menus[4]);
						//program.setIsforover(menus[5]==null?"n":menus[5]);
						
						program.setProject_url_datetime(menus[1]+menus[2].replace(":", "").replace(".0", "").replace(" ", ""));
						String datestring=DateUtils.addDate(menus[2],Integer.parseInt(menus[4]));
						
						if(!"".equals(playclientstring)&&null!=playclientstring&&menuname[i].equals(playclientstring)){
							program.setXystatus("play");    ////正在播放节目
						}
						if(menus[3].equals("loop"))
							program.setXyenddatetime(new StringBuffer().append(menus[4]).append(" 分钟").toString());//计算结束时间
						else
						    program.setXyenddatetime(new StringBuffer().append(menus[2].split(" ")[1]).append("-").append(datestring.split(" ")[1]).toString());//计算结束时间
						
						if(menus[3].equals("active")){
							String nowdatetime=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
							if(nowdatetime.compareTo(datestring)>=0)
								program.setXystatus("已放完");
							if(nowdatetime.compareTo(menus[2])<0)
								program.setXystatus("待  播");//如果当前正在播放定时节目，此时插播一个节目时，不会显示 “待播”
						}
						
						///////System.out.println("program---=-=-=--=--="+program.getXystatus()+ program.getXyenddatetime());

						list.add(program);
					}
					Collections.sort(list,new ProgramListCompareter());
					request.setAttribute("programes", list);
				}
			}
			request.setAttribute("resip", resip[1]);
			request.setAttribute("programName", programName);
		}else{
			request.setAttribute("sendcmd", cmd);
			/*CntResponseDAO cntresponsedao= new CntResponseDAO();
			UtilDAO utildao=new UtilDAO();
			List list= cntresponsedao.getCntResponsesByCmd(opp);
			utildao.deleteinfo("cnt_cmd",opp,"xct_cnt_response");
			request.setAttribute("cntresponseList", list);
			request.setAttribute("resips", resip);*/
		}
		request.setAttribute("cntmac",cntmac);
		return mapping.findForward(cmd);
	}
}