<!-- Automatically generated with polardoc Version 1.0.7 on Fri Aug 23 12:32:12 PDT 2002 -->
<!-- com.jconfig.win.AppUtilsMSVM | Do not remove or edit this line! -->
<HTML>
<HEAD>
<TITLE>
  Class com.jconfig.win.AppUtilsMSVM
</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF" LINK="#0000FF" VLINK="#0000FF" ALINK="#0000FF">
<BR>
<P>

<TABLE WIDTH="100%" BGCOLOR="#FFFFBB"><TR><TD WIDTH="100%">

<B>
<A HREF="../../../readme.html"><FONT SIZE="2">Main Page</FONT></A>

<BR>
&nbsp; &nbsp; <A HREF="../../../overview.html"><FONT SIZE="2">Cookbook/Overview</FONT></A>

&nbsp; &nbsp; <A HREF="../../../imagemeister.html"><FONT SIZE="2">ImageMeister</FONT></A>

&nbsp; &nbsp; <A HREF="../../../jcprops.html"><FONT SIZE="2">the jcprops file</FONT></A>

&nbsp; &nbsp; <A HREF="../../../licensing.html"><FONT SIZE="2">Licensing</FONT></A>

<BR>
</B><I>
&nbsp; &nbsp; <FONT SIZE="2">Binary Installation & Configuration</FONT></I><B> 
[
<A HREF="../../../wininfo.html"><FONT SIZE="2">Win</FONT></A> &middot; 
<A HREF="../../../macinfo.html"><FONT SIZE="2">Mac</FONT></A> &middot; 
<A HREF="../../../nixinfo.html"><FONT SIZE="2">Nix</FONT></A> &middot;
<A HREF="../../../osxinfo.html"><FONT SIZE="2">OSX</FONT></A> 
]

&nbsp; &nbsp; <A HREF="../../../changes.html"><FONT SIZE="2">Changes</FONT></A>


<BR>
&nbsp; &nbsp; <A HREF="../../../docs/pak-76b1.htm"><FONT SIZE="2">Public API</FONT></A>

<BR>
&nbsp; &nbsp; <A HREF="../../readme.html"><FONT SIZE="2">Source Code Main Page</FONT></A>

<BR>
</B><I>
&nbsp; &nbsp; &nbsp; &nbsp; <FONT SIZE="2">Java</FONT></I><B> 
[
<A HREF="pak-76b1.htm"><FONT SIZE="2">Common</FONT></A> &middot; 
<A HREF="pak-bd9a.htm"><FONT SIZE="2">Win</FONT></A> &middot; 
<A HREF="pak-545a.htm"><FONT SIZE="2">Mac</FONT></A> &middot; 
<A HREF="pak-c96f.htm"><FONT SIZE="2">Nix</FONT></A> 
]

</B><I>
&nbsp; &nbsp; <FONT SIZE="2">Native Code</FONT></I><B>
[
<A HREF="../cdocs/common/Common.html"><FONT SIZE="2">Common</FONT></A> &middot; 
<A HREF="../cdocs/win/Windows.html"><FONT SIZE="2">Win</FONT></A> &middot; 
<A HREF="../cdocs/mac/Mac.html"><FONT SIZE="2">Mac</FONT></A> &middot; 
<A HREF="../cdocs/nix/Linux.html"><FONT SIZE="2">Nix</FONT></A>
]

&nbsp; &nbsp; <A HREF="../manifest.html"><FONT SIZE="2">Manifest</FONT></A>

<BR>
</B><I>
&nbsp; &nbsp; &nbsp; &nbsp; <FONT SIZE="2">Native Code Overviews</FONT></I><B>
[
<A HREF="../commonnative.html"><FONT SIZE="2">Common</FONT></A> &middot; 
<A HREF="../winnative.html"><FONT SIZE="2">Win</FONT></A> &middot; 
<A HREF="../macnative.html"><FONT SIZE="2">Mac</FONT></A> &middot; 
<A HREF="../nixnative.html"><FONT SIZE="2">Nix</FONT></A> &middot; 
<A HREF="../strings.html"><FONT SIZE="2">Strings</FONT></A> 
]

</B><I>
&nbsp; &nbsp; <FONT SIZE="2">Macros</FONT></I><B>
[
<A HREF="../macros.html"><FONT SIZE="2">General</FONT></A> &middot; 
<A HREF="../nativemacros.html"><FONT SIZE="2">Native Macros</FONT></A> 
]

<BR>
</B><I>
&nbsp; &nbsp; &nbsp; &nbsp; <FONT SIZE="2">Walkthroughs</FONT></I><B> 
[
<A HREF="../overview_init.html"><FONT SIZE="2">Java only</FONT></A> &middot; 
<A HREF="../overview_monitors.html"><FONT SIZE="2">Java and native</FONT></A> 
]

</B><I>
&nbsp; &nbsp; <FONT SIZE="2">Building</FONT></I><B> 
[
<A HREF="../wininstall.html"><FONT SIZE="2">Win</FONT></A> &middot; 
<A HREF="../macinstall.html"><FONT SIZE="2">Mac</FONT></A> &middot; 
<A HREF="../nixinstall.html"><FONT SIZE="2">Nix</FONT></A> &middot; 
<A HREF="../osxinstall.html"><FONT SIZE="2">OSX</FONT></A> 
]

&nbsp; &nbsp; <A HREF="../distribution.html"><FONT SIZE="2">Distribution Issues</FONT></A>

<BR>

</TD></TR></TABLE>





<A NAME="_top_"></A>
<PRE>
<A HREF="packages.htm">All Packages</A>  <A HREF="pak-bd9a.htm">This Package</A>  <A HREF="tree.htm">Class Hierarchy</A>  <A HREF="search.htm">Class Search</A>  <A HREF="index.htm">Index</A>
</PRE>
<HR SIZE=1 ALIGN=left WIDTH="98%">
<B><FONT FACE="Arial,Helvetica" SIZE=+2>
     Class com.jconfig.win.AppUtilsMSVM
</FONT></B>
<PRE>
java.lang.Object
   |
   +----com.jconfig.win.AppUtilsMSVM
</PRE>
<P><TABLE BGCOLOR="#00ccff" WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD><FONT FACE="arial,helvetica" SIZE=+1><B>&nbsp;&nbsp;Summary</B></FONT></TD> </TR> </TABLE>
<A NAME="_Summary_"></A>
<PRE>
class  <STRONG>AppUtilsMSVM</STRONG>
     extends java.lang.Object
{
          // Fields 26
     static final int <A HREF="#DATE_ACC_OFFSET">DATE_ACC_OFFSET</A>;
     static final int <A HREF="#DATE_CRE_OFFSET">DATE_CRE_OFFSET</A>;
     static final int <A HREF="#DATE_MOD_OFFSET">DATE_MOD_OFFSET</A>;
     private static final String <A HREF="#copyrightString">copyrightString</A>;
     static final int <A HREF="#kDateBundleArrayLen">kDateBundleArrayLen</A>;
     static final int <A HREF="#kFindFirstAttrHidden">kFindFirstAttrHidden</A>;
     static final int <A HREF="#kFindFirstAttrSystem">kFindFirstAttrSystem</A>;
     private static final int <A HREF="#kGVIIntArrayLen">kGVIIntArrayLen</A>;
     private static final int <A HREF="#kGVIIntFileSystemFlagsOffset">kGVIIntFileSystemFlagsOffset</A>;
     private static final int <A HREF="#kGVIIntMaxComponentLengthOffset">kGVIIntMaxComponentLengthOffset</A>;
     private static final int <A HREF="#kGVIIntSerialNumberOffset">kGVIIntSerialNumberOffset</A>;
     private static final int <A HREF="#kGVIStringArrayLen">kGVIStringArrayLen</A>;
     private static final int <A HREF="#kGVIStringFileSystemNameOffset">kGVIStringFileSystemNameOffset</A>;
     private static final int <A HREF="#kGVIStringLabelOffset">kGVIStringLabelOffset</A>;
     private static final String <A HREF="#kLinkExtension">kLinkExtension</A>;
     static final int <A HREF="#kMonitorInfoNumInts">kMonitorInfoNumInts</A>;
     static final int <A HREF="#kResolveLinkFileNoUI">kResolveLinkFileNoUI</A>;
     static final int <A HREF="#kResolveLinkFileUI">kResolveLinkFileUI</A>;
     private static final String[] <A HREF="#kStandardBrowsers">kStandardBrowsers</A>;
     private static final int <A HREF="#kUnused">kUnused</A>;
     static final int <A HREF="#kVolumeCapInfoCapacityOffset">kVolumeCapInfoCapacityOffset</A>;
     static final int <A HREF="#kVolumeCapInfoCapacityToUserOffset">kVolumeCapInfoCapacityToUserOffset</A>;
     static final int <A HREF="#kVolumeCapInfoFreeSpaceOffset">kVolumeCapInfoFreeSpaceOffset</A>;
     static final int <A HREF="#kVolumeCapInfoFreeSpaceToUserOffset">kVolumeCapInfoFreeSpaceToUserOffset</A>;
     static final int <A HREF="#kVolumeCapInfoLen">kVolumeCapInfoLen</A>;
     private static String <A HREF="#tempDir">tempDir</A>;

          // Constructors 1
     private <A HREF="#AppUtilsMSVM()">AppUtilsMSVM</A>();

          // Methods 85
     static String <A HREF="#adjustBadMSVM1ParentPath(java.lang.String)">adjustBadMSVM1ParentPath</A>(String);
     static String <A HREF="#adjustBadMSVM1Path(java.lang.String)">adjustBadMSVM1Path</A>(String);
     static int <A HREF="#createFileAlias(java.lang.String, java.lang.String, int)">createFileAlias</A>(String, String, int);
     static int <A HREF="#createVolumeAlias(java.lang.String, java.lang.String, int)">createVolumeAlias</A>(String, String, int);
     static String[] <A HREF="#findAppsByExtension(java.lang.String, int, int)">findAppsByExtension</A>(String, int, int);
     static String[] <A HREF="#findAppsByName(java.lang.String, int, int)">findAppsByName</A>(String, int, int);
     static int <A HREF="#findClose(int)">findClose</A>(int);
     static int <A HREF="#findFirstFile(java.lang.String, int[], int[], java.lang.String[])">findFirstFile</A>(String, int[], int[], String[]);
     static int <A HREF="#findNextFile(int, int[], java.lang.String[])">findNextFile</A>(int, int[], String[]);
     static int <A HREF="#findVerbs(java.lang.String[], java.lang.String, int, int[], java.lang.String[])">findVerbs</A>(String[], String, int, int[], String[]);
     static int <A HREF="#getAllMonitorInfo(int[], int, int[])">getAllMonitorInfo</A>(int[], int, int[]);
     static int <A HREF="#getAllProcessInfo(int[], int[], int[], int[], int[], int[], int[], int[], int[], int[], java.lang.String[], int, int[])">getAllProcessInfo</A>(int[], int[], int[], int[], int[], int[], int[], int[], int[], int[], String[], int, int[]);
     static int <A HREF="#getDriveDisplayName(java.lang.String, java.lang.String[])">getDriveDisplayName</A>(String, String[]);
     static int <A HREF="#getExecutableType(java.lang.String, int[])">getExecutableType</A>(String, int[]);
     static int <A HREF="#getExtIcon(java.lang.String, int, int, int, int, int, int[])">getExtIcon</A>(String, int, int, int, int, int, int[]);
     static int <A HREF="#getFileAttributes(java.lang.String, int[])">getFileAttributes</A>(String, int[]);
     static int <A HREF="#getFileAttributesMask(java.lang.String, int[])">getFileAttributesMask</A>(String, int[]);
     static int <A HREF="#getFileAttributesWriteMask(java.lang.String, int[])">getFileAttributesWriteMask</A>(String, int[]);
     static int <A HREF="#getFileDate(java.lang.String, int[])">getFileDate</A>(String, int[]);
     static int <A HREF="#getFileIcon(java.lang.String, int, int, int, int, int, int[])">getFileIcon</A>(String, int, int, int, int, int, int[]);
     static int <A HREF="#getMainMonitorInfo(int[])">getMainMonitorInfo</A>(int[]);
     static int <A HREF="#getShortPathName(java.lang.String, java.lang.String[])">getShortPathName</A>(String, String[]);
     static int <A HREF="#getVolumeCapInfo(java.lang.String, long[])">getVolumeCapInfo</A>(String, long[]);
     static int <A HREF="#getVolumeDate(java.lang.String, int[])">getVolumeDate</A>(String, int[]);
     static int <A HREF="#getVolumeFlags(java.lang.String, int[])">getVolumeFlags</A>(String, int[]);
     static int <A HREF="#getVolumeIcon(java.lang.String, int, int, int, int, int, int[])">getVolumeIcon</A>(String, int, int, int, int, int, int[]);
     static int <A HREF="#getVolumeLabel(java.lang.String, java.lang.String[])">getVolumeLabel</A>(String, String[]);
     static int <A HREF="#getVolumeMaxFileNameLength(java.lang.String, int[])">getVolumeMaxFileNameLength</A>(String, int[]);
     static int <A HREF="#getVolumeReadFlagsMask(java.lang.String, int[])">getVolumeReadFlagsMask</A>(String, int[]);
     static int <A HREF="#getVolumeReferenceNumber(java.lang.String, int[])">getVolumeReferenceNumber</A>(String, int[]);
     static int <A HREF="#getVolumes(int, int[], java.lang.String[])">getVolumes</A>(int, int[], String[]);
     static void <A HREF="#initialize(java.io.File)">initialize</A>(File);
     static boolean <A HREF="#isDrivePath(java.io.File)">isDrivePath</A>(File);
     private static boolean <A HREF="#isDriveString(java.lang.String)">isDriveString</A>(String);
     static boolean <A HREF="#isLinkFile(java.io.File)">isLinkFile</A>(File);
     static int <A HREF="#launchApp(java.lang.String, java.lang.String, java.lang.String, java.lang.String, int[], int, java.lang.String[])">launchApp</A>(String, String, String, String, int[], int, String[]);
     static int <A HREF="#launchURL(java.lang.String, int, java.lang.String[])">launchURL</A>(String, int, String[]);
     static int <A HREF="#moveApp(int[], int, int)">moveApp</A>(int[], int, int);
     private static native int <A HREF="#nativeCreateFileAlias(java.lang.String, java.lang.String, int)">nativeCreateFileAlias</A>(String, String, int);
     private static native int <A HREF="#nativeCreateVolumeAlias(java.lang.String, java.lang.String, int)">nativeCreateVolumeAlias</A>(String, String, int);
     private static native int <A HREF="#nativeFindAppsByExtension(java.lang.String, java.lang.String, int, int, int[], java.lang.String[])">nativeFindAppsByExtension</A>(String, String, int, int, int[], String[]);
     private static native int <A HREF="#nativeFindAppsByName(java.lang.String, int, int, int[], java.lang.String[])">nativeFindAppsByName</A>(String, int, int, int[], String[]);
     private static native int <A HREF="#nativeFindClose(int)">nativeFindClose</A>(int);
     private static native int <A HREF="#nativeFindFirstFile(java.lang.String, int[], int[], java.lang.String[])">nativeFindFirstFile</A>(String, int[], int[], String[]);
     private static native int <A HREF="#nativeFindNextFile(int, int[], java.lang.String[])">nativeFindNextFile</A>(int, int[], String[]);
     private static native int <A HREF="#nativeFindVerbs(java.lang.String[], java.lang.String, int, int[], java.lang.String[])">nativeFindVerbs</A>(String[], String, int, int[], String[]);
     private static native int <A HREF="#nativeGetAllMonitorInfo(int[], int, int[])">nativeGetAllMonitorInfo</A>(int[], int, int[]);
     private static native int <A HREF="#nativeGetAllProcessInfo(int[], int[], int[], int[], int[], int[], int[], int[], int[], int[], java.lang.String[], int, int[])">nativeGetAllProcessInfo</A>(int[], int[], int[], int[], int[], int[], int[], int[], int[], int[], String[], int, int[]);
     private static native int <A HREF="#nativeGetDriveDisplayName(java.lang.String, java.lang.String[])">nativeGetDriveDisplayName</A>(String, String[]);
     private static native int <A HREF="#nativeGetExecutableType(java.lang.String, int[])">nativeGetExecutableType</A>(String, int[]);
     private static native int <A HREF="#nativeGetExtIcon(java.lang.String, int, int, int, int, int, int[])">nativeGetExtIcon</A>(String, int, int, int, int, int, int[]);
     private static native int <A HREF="#nativeGetFileAttributes(java.lang.String, int[])">nativeGetFileAttributes</A>(String, int[]);
     private static native int <A HREF="#nativeGetFileAttributesMask(java.lang.String, int[])">nativeGetFileAttributesMask</A>(String, int[]);
     private static native int <A HREF="#nativeGetFileAttributesWriteMask(java.lang.String, int[])">nativeGetFileAttributesWriteMask</A>(String, int[]);
     private static native int <A HREF="#nativeGetFileDate(int, java.lang.String, int[])">nativeGetFileDate</A>(int, String, int[]);
     private static native int <A HREF="#nativeGetFileIcon(java.lang.String, int, int, int, int, int, int[])">nativeGetFileIcon</A>(String, int, int, int, int, int, int[]);
     private static native int <A HREF="#nativeGetMainMonitorInfo(int[])">nativeGetMainMonitorInfo</A>(int[]);
     private static native int <A HREF="#nativeGetShortPathName(java.lang.String, java.lang.String[])">nativeGetShortPathName</A>(String, String[]);
     private static native int <A HREF="#nativeGetVolumeCapInfo(java.lang.String, long[])">nativeGetVolumeCapInfo</A>(String, long[]);
     private static native int <A HREF="#nativeGetVolumeDate(int, java.lang.String, int[])">nativeGetVolumeDate</A>(int, String, int[]);
     private static native int <A HREF="#nativeGetVolumeFlags(java.lang.String, int[])">nativeGetVolumeFlags</A>(String, int[]);
     private static native int <A HREF="#nativeGetVolumeIcon(java.lang.String, int, int, int, int, int, int[])">nativeGetVolumeIcon</A>(String, int, int, int, int, int, int[]);
     private static native int <A HREF="#nativeGetVolumeInformation(java.lang.String, java.lang.String[], int[])">nativeGetVolumeInformation</A>(String, String[], int[]);
     private static native int <A HREF="#nativeGetVolumeReadFlagsMask(java.lang.String, int[])">nativeGetVolumeReadFlagsMask</A>(String, int[]);
     private static native int <A HREF="#nativeGetVolumes(int, int[], java.lang.String[])">nativeGetVolumes</A>(int, int[], String[]);
     private static native int <A HREF="#nativeLaunchApp(java.lang.String, java.lang.String, java.lang.String, java.lang.String, int[], int, java.lang.String[])">nativeLaunchApp</A>(String, String, String, String, int[], int, String[]);
     private static native int <A HREF="#nativeLaunchURL(java.lang.String, java.lang.String, int, java.lang.String[])">nativeLaunchURL</A>(String, String, int, String[]);
     private static native int <A HREF="#nativeMoveApp(int[], int, int)">nativeMoveApp</A>(int[], int, int);
     private static native int <A HREF="#nativeQuitApp(int[], int)">nativeQuitApp</A>(int[], int);
     private static native int <A HREF="#nativeResolveLinkFile(java.lang.String, java.lang.String[], int)">nativeResolveLinkFile</A>(String, String[], int);
     private static native int <A HREF="#nativeSetFileAttributes(java.lang.String, int, int)">nativeSetFileAttributes</A>(String, int, int);
     private static native int <A HREF="#nativeSetVolumeLabel(java.lang.String, java.lang.String)">nativeSetVolumeLabel</A>(String, String);
     private static native int <A HREF="#nativeVIPGetFileVersionInfoEnd(int)">nativeVIPGetFileVersionInfoEnd</A>(int);
     private static native int <A HREF="#nativeVIPGetFileVersionInfoStart(java.lang.String)">nativeVIPGetFileVersionInfoStart</A>(String);
     private static native int <A HREF="#nativeVIPVerQueryValue(int, java.lang.String, java.lang.String[])">nativeVIPVerQueryValue</A>(int, String, String[]);
     private static native int <A HREF="#nativeVerifyNativeAppData(int[])">nativeVerifyNativeAppData</A>(int[]);
     static String <A HREF="#pathToDriveName(java.io.File)">pathToDriveName</A>(File);
     static int <A HREF="#quitApp(int[], int)">quitApp</A>(int[], int);
     static int <A HREF="#resolveLinkFile(java.lang.String, java.lang.String[], int)">resolveLinkFile</A>(String, String[], int);
     static int <A HREF="#setFileAttributes(java.lang.String, int, int)">setFileAttributes</A>(String, int, int);
     static int <A HREF="#setVolumeLabel(java.lang.String, java.lang.String)">setVolumeLabel</A>(String, String);
     static int <A HREF="#verifyNativeAppData(int[])">verifyNativeAppData</A>(int[]);
     static int <A HREF="#vipGetFileVersionInfoEnd(int)">vipGetFileVersionInfoEnd</A>(int);
     static int <A HREF="#vipGetFileVersionInfoStart(java.lang.String)">vipGetFileVersionInfoStart</A>(String);
     static int <A HREF="#vipVerQueryValue(int, java.lang.String, java.lang.String[])">vipVerQueryValue</A>(int, String, String[]);

}
</PRE>
<P>
<DL>
<P>
This is the lowest Java layer, and contains the native methods as static private members.
Many of the methods of this file are simply wrappers around the private native methods.
Almost all of these methods return an error code; 0 means success, other values indicate some
form of error.

<P>
The 'initialize' method should be called before calling any other methods of this class.

<P>
The term 'WANC' in the documentation means that that method is just a Wrapper Around Native Code.

<P>
Future directions: make sure this is the lowest layer, by moving methods which have knowledge of higher
layers (e.g., createNewDiskObject) into other files.
<P>
<DT><B>Author:</B>
<DD>
Copyright (c) 1997-2002 Samizdat Productions. All Rights Reserved.

</DL>
<P>
<BR><BR>
<BR><TABLE BGCOLOR="#00ccff" WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD><FONT FACE="arial,helvetica" SIZE=+1><B>&nbsp;&nbsp;Fields</B></FONT></TD> </TR> </TABLE>
<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="copyrightString"><FONT COLOR="#0000FF">&middot;</FONT> copyrightString</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static final String copyrightString
</PRE>
<BLOCKQUOTE>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kFindFirstAttrHidden"><FONT COLOR="#0000FF">&middot;</FONT> kFindFirstAttrHidden</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kFindFirstAttrHidden
</PRE>
<BLOCKQUOTE>
<P>
Atrribute returned by findFirstFile/findNextFile.
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kFindFirstAttrSystem"><FONT COLOR="#0000FF">&middot;</FONT> kFindFirstAttrSystem</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kFindFirstAttrSystem
</PRE>
<BLOCKQUOTE>
<P>
Atrribute returned by findFirstFile/findNextFile.
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kDateBundleArrayLen"><FONT COLOR="#0000FF">&middot;</FONT> kDateBundleArrayLen</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kDateBundleArrayLen
</PRE>
<BLOCKQUOTE>
<P>
The getFileDate() and getVolumeDate() methods are passed
an array of java ints, into which the native code puts the modification,
creation and access dates. Each date takes 6 ints: year, month, day,
hour, minute, and second. This defines the total length of the jint array.
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="DATE_MOD_OFFSET"><FONT COLOR="#0000FF">&middot;</FONT> DATE_MOD_OFFSET</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int DATE_MOD_OFFSET
</PRE>
<BLOCKQUOTE>
<P>
The offset of the modification date in the array passed to getFileDate() and getVolumeDate().
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="DATE_CRE_OFFSET"><FONT COLOR="#0000FF">&middot;</FONT> DATE_CRE_OFFSET</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int DATE_CRE_OFFSET
</PRE>
<BLOCKQUOTE>
<P>
The offset of the creation date in the array passed to getFileDate() and getVolumeDate().
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="DATE_ACC_OFFSET"><FONT COLOR="#0000FF">&middot;</FONT> DATE_ACC_OFFSET</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int DATE_ACC_OFFSET
</PRE>
<BLOCKQUOTE>
<P>
The offset of the access date in the array passed to getFileDate() and getVolumeDate().
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kMonitorInfoNumInts"><FONT COLOR="#0000FF">&middot;</FONT> kMonitorInfoNumInts</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kMonitorInfoNumInts
</PRE>
<BLOCKQUOTE>
<P>
Used in retrieving monitor information; see	the 'getAllMonitorInfo' method.
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kVolumeCapInfoLen"><FONT COLOR="#0000FF">&middot;</FONT> kVolumeCapInfoLen</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kVolumeCapInfoLen
</PRE>
<BLOCKQUOTE>
<P>
See the 'getVolumeCapInfo' method.
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kVolumeCapInfoCapacityOffset"><FONT COLOR="#0000FF">&middot;</FONT> kVolumeCapInfoCapacityOffset</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kVolumeCapInfoCapacityOffset
</PRE>
<BLOCKQUOTE>
<P>
See the 'getVolumeCapInfo' method.
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kVolumeCapInfoFreeSpaceOffset"><FONT COLOR="#0000FF">&middot;</FONT> kVolumeCapInfoFreeSpaceOffset</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kVolumeCapInfoFreeSpaceOffset
</PRE>
<BLOCKQUOTE>
<P>
See the 'getVolumeCapInfo' method.
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kVolumeCapInfoCapacityToUserOffset"><FONT COLOR="#0000FF">&middot;</FONT> kVolumeCapInfoCapacityToUserOffset</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kVolumeCapInfoCapacityToUserOffset
</PRE>
<BLOCKQUOTE>
<P>
See the 'getVolumeCapInfo' method.
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kVolumeCapInfoFreeSpaceToUserOffset"><FONT COLOR="#0000FF">&middot;</FONT> kVolumeCapInfoFreeSpaceToUserOffset</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kVolumeCapInfoFreeSpaceToUserOffset
</PRE>
<BLOCKQUOTE>
<P>
See the 'getVolumeCapInfo' method.
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kResolveLinkFileNoUI"><FONT COLOR="#0000FF">&middot;</FONT> kResolveLinkFileNoUI</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kResolveLinkFileNoUI
</PRE>
<BLOCKQUOTE>
<P>
See the 'resolveLinkFile' method.
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kResolveLinkFileUI"><FONT COLOR="#0000FF">&middot;</FONT> kResolveLinkFileUI</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static final int kResolveLinkFileUI
</PRE>
<BLOCKQUOTE>
<P>
See the 'resolveLinkFile' method.
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kStandardBrowsers"><FONT COLOR="#0000FF">&middot;</FONT> kStandardBrowsers</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static final String[] kStandardBrowsers
</PRE>
<BLOCKQUOTE>
<P>
See the 'launchURL' method.
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kGVIStringArrayLen"><FONT COLOR="#0000FF">&middot;</FONT> kGVIStringArrayLen</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static final int kGVIStringArrayLen
</PRE>
<BLOCKQUOTE>
<P>
Used with calls to nativeGetVolumeInformation().
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kGVIIntArrayLen"><FONT COLOR="#0000FF">&middot;</FONT> kGVIIntArrayLen</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static final int kGVIIntArrayLen
</PRE>
<BLOCKQUOTE>
<P>
Used with calls to nativeGetVolumeInformation().
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kGVIStringLabelOffset"><FONT COLOR="#0000FF">&middot;</FONT> kGVIStringLabelOffset</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static final int kGVIStringLabelOffset
</PRE>
<BLOCKQUOTE>
<P>
Used with calls to nativeGetVolumeInformation().
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kGVIStringFileSystemNameOffset"><FONT COLOR="#0000FF">&middot;</FONT> kGVIStringFileSystemNameOffset</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static final int kGVIStringFileSystemNameOffset
</PRE>
<BLOCKQUOTE>
<P>
Used with calls to nativeGetVolumeInformation().
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kGVIIntSerialNumberOffset"><FONT COLOR="#0000FF">&middot;</FONT> kGVIIntSerialNumberOffset</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static final int kGVIIntSerialNumberOffset
</PRE>
<BLOCKQUOTE>
<P>
Used with calls to nativeGetVolumeInformation().
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kGVIIntMaxComponentLengthOffset"><FONT COLOR="#0000FF">&middot;</FONT> kGVIIntMaxComponentLengthOffset</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static final int kGVIIntMaxComponentLengthOffset
</PRE>
<BLOCKQUOTE>
<P>
Used with calls to nativeGetVolumeInformation().
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kGVIIntFileSystemFlagsOffset"><FONT COLOR="#0000FF">&middot;</FONT> kGVIIntFileSystemFlagsOffset</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static final int kGVIIntFileSystemFlagsOffset
</PRE>
<BLOCKQUOTE>
<P>
Used with calls to nativeGetVolumeInformation().
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kUnused"><FONT COLOR="#0000FF">&middot;</FONT> kUnused</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static final int kUnused
</PRE>
<BLOCKQUOTE>
<P>
Used for some unused arguments.
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="kLinkExtension"><FONT COLOR="#0000FF">&middot;</FONT> kLinkExtension</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static final String kLinkExtension
</PRE>
<BLOCKQUOTE>
<P>
The extension of shortcut files.
<P>
<P> </BLOCKQUOTE>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3> <A NAME="tempDir"><FONT COLOR="#0000FF">&middot;</FONT> tempDir</A></H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static String tempDir
</PRE>
<BLOCKQUOTE>
<P>
Holds the full path of a directory used to store temporary files.
<P>
<P> </BLOCKQUOTE>

<P>

<BR><TABLE BGCOLOR="#00ccff" WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD><FONT FACE="arial,helvetica" SIZE=+1><B>&nbsp;&nbsp;Constructors</B></FONT></TD> </TR> </TABLE>
<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="AppUtilsMSVM"><FONT COLOR="#FFCC00">&middot;</FONT></A>
<A NAME="AppUtilsMSVM()">AppUtilsMSVM</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private AppUtilsMSVM() </PRE>
<BLOCKQUOTE>
</BLOCKQUOTE> <BR>


<BR><TABLE BGCOLOR="#00ccff" WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD><FONT FACE="arial,helvetica" SIZE=+1><B>&nbsp;&nbsp;Methods</B></FONT></TD> </TR> </TABLE>
<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="initialize"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="initialize(java.io.File)">initialize</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static void initialize(File temp) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Must be called before calling other methods of this class
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> temp</I></TD> <TD>a writable directory in which temporary files will be created.</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="adjustBadMSVM1ParentPath"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="adjustBadMSVM1ParentPath(java.lang.String)">adjustBadMSVM1ParentPath</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static String adjustBadMSVM1ParentPath(String ss) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Works around a problem with the IE3.0 VM
<P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="adjustBadMSVM1Path"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="adjustBadMSVM1Path(java.lang.String)">adjustBadMSVM1Path</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static String adjustBadMSVM1Path(String ss) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Works around a problem with the IE3.0 VM
<P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="isLinkFile"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="isLinkFile(java.io.File)">isLinkFile</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static boolean isLinkFile(File fl) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Is 'fl' a shortcut?
<P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="isDrivePath"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="isDrivePath(java.io.File)">isDrivePath</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static boolean isDrivePath(File fl) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Is 'fl' a volume?
<P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="pathToDriveName"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="pathToDriveName(java.io.File)">pathToDriveName</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static String pathToDriveName(File fl) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Returns the volume which contains 'fl', or null if that information can't be obtained.
<P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="isDriveString"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="isDriveString(java.lang.String)">isDriveString</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static boolean isDriveString(String drivePath) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Is 'drivePath' a volume path, i.e., 'c:\'?
<P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getFileIcon"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getFileIcon(java.lang.String, int, int, int, int, int, int[])">getFileIcon</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getFileIcon(String fullPath, 
                          int whichIcon, 
                          int w, 
                          int h, 
                          int xform, 
                          int align, 
                          int[] pData) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Gets the icon for a file.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> fullPath</I></TD> <TD>full path of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> whichIcon</I></TD> <TD>either IconBundle.ICON_LARGE or IconBundle.ICON_SMALL</TD></TR>
<TR VALIGN=TOP> <TD><I> w</I></TD> <TD>the width of the icon</TD></TR>
<TR VALIGN=TOP> <TD><I> h</I></TD> <TD>the height of the icon</TD></TR>
<TR VALIGN=TOP> <TD><I> xform</I></TD> <TD>any transformation to be applied to the icon</TD></TR>
<TR VALIGN=TOP> <TD><I> align</I></TD> <TD>any alignment to be applied to the icon</TD></TR>
<TR VALIGN=TOP> <TD><I> pData</I></TD> <TD>an array of ints which will hold the Java format ARGB data for the icon
This must have at least w * h elements</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getExtIcon"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getExtIcon(java.lang.String, int, int, int, int, int, int[])">getExtIcon</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getExtIcon(String ext, 
                         int whichIcon, 
                         int w, 
                         int h, 
                         int xform, 
                         int align, 
                         int[] pData) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Gets the icon for files ending in the given extension.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> ext</I></TD> <TD>the extension</TD></TR>
<TR VALIGN=TOP> <TD><I> whichIcon</I></TD> <TD>either IconBundle.ICON_LARGE or IconBundle.ICON_SMALL</TD></TR>
<TR VALIGN=TOP> <TD><I> w</I></TD> <TD>the width of the icon</TD></TR>
<TR VALIGN=TOP> <TD><I> h</I></TD> <TD>the height of the icon</TD></TR>
<TR VALIGN=TOP> <TD><I> xform</I></TD> <TD>any transformation to be applied to the icon</TD></TR>
<TR VALIGN=TOP> <TD><I> align</I></TD> <TD>any alignment to tbe applied to the icon</TD></TR>
<TR VALIGN=TOP> <TD><I> pData</I></TD> <TD>an array of ints which will hold the Java format ARGB data for the icon
This must have at least w * h elements</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getVolumeIcon"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getVolumeIcon(java.lang.String, int, int, int, int, int, int[])">getVolumeIcon</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getVolumeIcon(String driveName, 
                            int whichIcon, 
                            int w, 
                            int h, 
                            int xform, 
                            int align, 
                            int[] pData) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Gets the icon for a volume

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> driveName</I></TD> <TD>the voluem</TD></TR>
<TR VALIGN=TOP> <TD><I> whichIcon</I></TD> <TD>either IconBundle.ICON_LARGE or IconBundle.ICON_SMALL</TD></TR>
<TR VALIGN=TOP> <TD><I> w</I></TD> <TD>the width of the icon</TD></TR>
<TR VALIGN=TOP> <TD><I> h</I></TD> <TD>the height of the icon</TD></TR>
<TR VALIGN=TOP> <TD><I> xform</I></TD> <TD>any transformation to be applied to the icon</TD></TR>
<TR VALIGN=TOP> <TD><I> align</I></TD> <TD>any alignment to tbe applied to the icon</TD></TR>
<TR VALIGN=TOP> <TD><I> pData</I></TD> <TD>an array of ints which will hold the Java format ARGB data for the icon
This must have at least w * h elements</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="createVolumeAlias"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="createVolumeAlias(java.lang.String, java.lang.String, int)">createVolumeAlias</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int createVolumeAlias(String driveName, 
                                String newAliasPath, 
                                int flags) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Create an alias to a volume

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> driveName</I></TD> <TD>the target</TD></TR>
<TR VALIGN=TOP> <TD><I> newAliasPath</I></TD> <TD>the full path to the new alias</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="createFileAlias"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="createFileAlias(java.lang.String, java.lang.String, int)">createFileAlias</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int createFileAlias(String targetPath, 
                              String newAliasPath, 
                              int flags) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Create an alias to a file

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> targetPath</I></TD> <TD>full path of the target</TD></TR>
<TR VALIGN=TOP> <TD><I> newAliasPath</I></TD> <TD>the full path to the new alias</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="vipGetFileVersionInfoStart"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="vipGetFileVersionInfoStart(java.lang.String)">vipGetFileVersionInfoStart</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int vipGetFileVersionInfoStart(String fileName) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Retrieves version information for a file.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> fileName</I></TD> <TD>the full path of the file</TD></TR>
</TABLE><P>
<DT> <B>Returns:</B>
<DD> 0 if the file has no version information, otherwise a handle which is passed
to 'vipVerQueryValue' and 'vipGetFileVersionInfoEnd'
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="vipVerQueryValue"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="vipVerQueryValue(int, java.lang.String, java.lang.String[])">vipVerQueryValue</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int vipVerQueryValue(int versionH, 
                               String key, 
                               String[] value) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Call this after calling 'vipGetFileVersionInfoStart' to get specific version information.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> versionH</I></TD> <TD>the value returned from 'vipGetFileVersionInfoStart'</TD></TR>
<TR VALIGN=TOP> <TD><I> key</I></TD> <TD>the name of the version information you wish to retrieve, e.g. "CompanyName"</TD></TR>
<TR VALIGN=TOP> <TD><I> value</I></TD> <TD>the value of that key will be returned at value[ 0 ]</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="vipGetFileVersionInfoEnd"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="vipGetFileVersionInfoEnd(int)">vipGetFileVersionInfoEnd</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int vipGetFileVersionInfoEnd(int versionH) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Frees the handle returned from 'vipGetFileVersionInfoStart'.

<BR><B>WANC</B><BR>
<P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getVolumes"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getVolumes(int, int[], java.lang.String[])">getVolumes</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getVolumes(int maxToReturn, 
                         int[] numReturned, 
                         String[] driveNames) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Retrieve a list of the mounted volumes.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> maxToReturn</I></TD> <TD>the maximum number of volumes to return</TD></TR>
<TR VALIGN=TOP> <TD><I> numReturned</I></TD> <TD>on return, the first element will contain the number of volumes in 'driveNames'</TD></TR>
<TR VALIGN=TOP> <TD><I> driveNames</I></TD> <TD>on return, contains an array of Strings representing each drive. Must have
at least 'maxToReturn' elements.</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getVolumeLabel"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getVolumeLabel(java.lang.String, java.lang.String[])">getVolumeLabel</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getVolumeLabel(String driveName, 
                             String[] label) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Uses WinAPI 'GetVolumeInformation()' to get the volume label
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> driveName</I></TD> <TD>the drive name</TD></TR>
<TR VALIGN=TOP> <TD><I> label</I></TD> <TD>the drive label will be put at label[ 0 ]</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getVolumeMaxFileNameLength"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getVolumeMaxFileNameLength(java.lang.String, int[])">getVolumeMaxFileNameLength</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getVolumeMaxFileNameLength(String driveName, 
                                         int[] nameLen) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Uses WinAPI 'GetVolumeInformation()' to get the maximum file name length of a volume.
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> driveName</I></TD> <TD>the drive name</TD></TR>
<TR VALIGN=TOP> <TD><I> nameLen</I></TD> <TD>the name length will be placed at nameLen[ 0 ]</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getVolumeReferenceNumber"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getVolumeReferenceNumber(java.lang.String, int[])">getVolumeReferenceNumber</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getVolumeReferenceNumber(String driveName, 
                                       int[] refNum) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Uses WinAPI 'GetVolumeInformation()' to get the reference number of a volume.
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> driveName</I></TD> <TD>the drive name</TD></TR>
<TR VALIGN=TOP> <TD><I> nameLen</I></TD> <TD>the reference number will be placed at refNum[ 0 ]</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getVolumeCapInfo"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getVolumeCapInfo(java.lang.String, long[])">getVolumeCapInfo</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getVolumeCapInfo(String driveName, 
                               long[] capInfo) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Gets the free space and max capacity of the given drive.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> driveName</I></TD> <TD>the drive name.</TD></TR>
<TR VALIGN=TOP> <TD><I> capInfo</I></TD> <TD>must have at least kVolumeCapInfoLen elements.
The max capacity will be placed at offset kVolumeCapInfoCapacityOffset,
and the free space will be placed at offset kVolumeCapInfoFreeSpaceOffset.</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="setVolumeLabel"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="setVolumeLabel(java.lang.String, java.lang.String)">setVolumeLabel</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int setVolumeLabel(String driveName, 
                             String newLabel) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Sets the volume label of a drive

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> driveName</I></TD> <TD>the drive name</TD></TR>
<TR VALIGN=TOP> <TD><I> newLabel</I></TD> <TD>the new label</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getDriveDisplayName"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getDriveDisplayName(java.lang.String, java.lang.String[])">getDriveDisplayName</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getDriveDisplayName(String driveName, 
                                  String[] displayName) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Gets the display name of a drive. This is the name that would be displayed to the user.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> driveName</I></TD> <TD>the drive name</TD></TR>
<TR VALIGN=TOP> <TD><I> displayName</I></TD> <TD>the display name will be placed at displayName[ 0 ]</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getVolumeFlags"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getVolumeFlags(java.lang.String, int[])">getVolumeFlags</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getVolumeFlags(String driveName, 
                             int[] flags) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Gets the flags for a volume. See DiskVolume for a description of the flags

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> driveName</I></TD> <TD>the drive name</TD></TR>
<TR VALIGN=TOP> <TD><I> flags</I></TD> <TD>the flags will be placed at flags[ 0 ]</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getVolumeReadFlagsMask"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getVolumeReadFlagsMask(java.lang.String, int[])">getVolumeReadFlagsMask</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getVolumeReadFlagsMask(String driveName, 
                                     int[] flags) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Gets the read flags for a volume. See DiskVolume for a description of this.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> driveName</I></TD> <TD>the drive name</TD></TR>
<TR VALIGN=TOP> <TD><I> flags</I></TD> <TD>the flags will be placed at flags[ 0 ]</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="resolveLinkFile"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="resolveLinkFile(java.lang.String, java.lang.String[], int)">resolveLinkFile</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int resolveLinkFile(String linkFilePath, 
                              String[] retPath, 
                              int flags) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Resolves a shortcut (.lnk file.)

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> linkFilePath</I></TD> <TD>the full path of the .lnk file</TD></TR>
<TR VALIGN=TOP> <TD><I> retPath</I></TD> <TD>the resolved full path will be placed at retPath[ 0 ]</TD></TR>
<TR VALIGN=TOP> <TD><I> flags</I></TD> <TD>either kResolveLinkFileNoUI or kResolveLinkFileUI</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getAllMonitorInfo"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getAllMonitorInfo(int[], int, int[])">getAllMonitorInfo</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getAllMonitorInfo(int[] monitorInfo, 
                                int maxToReturn, 
                                int[] numReturned) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Gets information on all the user's monitors. 
Info on each monitor will be placed into the 'monitorInfo' int array. Each monitor consumes 'kMonitorInfoNumInts'
elements of this array. The format of each monitor is as described in the 'getMainMonitorInfo' method.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> montitorInfo</I></TD> <TD>must have at least 'maxToReturn' * kMonitorInfoNumInts elements.</TD></TR>
<TR VALIGN=TOP> <TD><I> maxToReturn</I></TD> <TD>the maximum number of monitors to return info on.</TD></TR>
<TR VALIGN=TOP> <TD><I> numReturned</I></TD> <TD>the number of monitors returned will be placed at numReturned[ 0 ]</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getMainMonitorInfo"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getMainMonitorInfo(int[])">getMainMonitorInfo</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getMainMonitorInfo(int[] monitorInfo) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Stores information on the user's main monitor into the 'monitorInfo' array.
This array must have at least 'kMonitorInfoNumInts' elements.
The information on the monitor is stored at the 'kOffs???' offsets defined in 'MonitorMSVM.java':

<BR><B>WANC</B><BR>
<P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getExecutableType"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getExecutableType(java.lang.String, int[])">getExecutableType</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getExecutableType(String fullPath, 
                                int[] val) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Gets the type of the given executable.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> fullPath</I></TD> <TD>the full path of the executable</TD></TR>
<TR VALIGN=TOP> <TD><I> val</I></TD> <TD>the type will be placed at val[ 0 ], and will be one of the k???Exe values defined in 'AppFile.java':
'AF_W32', etc.</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getFileAttributes"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getFileAttributes(java.lang.String, int[])">getFileAttributes</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getFileAttributes(String fullPath, 
                                int[] val) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Gets the attributes of the given file.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> fullPath</I></TD> <TD>the full path of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> val</I></TD> <TD>the attributes will be placed at val[ 0 ], and will be one of the attributes defined in 'DiskFile.java':
'FILE_EXECUTABLE', 'FILE_DIR', etc.</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getFileAttributesMask"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getFileAttributesMask(java.lang.String, int[])">getFileAttributesMask</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getFileAttributesMask(String fullPath, 
                                    int[] val) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Indicates which bits of the value returned from getFileAttributes are valid.
See that method for more information.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> fullPath</I></TD> <TD>the full path of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> val</I></TD> <TD>the mask will be placed at val[ 0 ]</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="setFileAttributes"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="setFileAttributes(java.lang.String, int, int)">setFileAttributes</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int setFileAttributes(String thePath, 
                                int whichFlags, 
                                int newValues) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Set the indicated flags.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> fullPath</I></TD> <TD>the full path of the file</TD></TR>
<TR VALIGN=TOP> <TD><I> whichFlags</I></TD> <TD>the mask indicating which bits in newValues are significant</TD></TR>
<TR VALIGN=TOP> <TD><I> newValues</I></TD> <TD>contains the bits to be set/reset.</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getFileAttributesWriteMask"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getFileAttributesWriteMask(java.lang.String, int[])">getFileAttributesWriteMask</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getFileAttributesWriteMask(String thePath, 
                                         int[] val) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Gets the mask which indicates which bits in the argument to 'setFileAttributes' can be set.
Returns an error code, the mask is returned in the first element of val.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> fullPath</I></TD> <TD>the full path of the file</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="launchApp"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="launchApp(java.lang.String, java.lang.String, java.lang.String, java.lang.String, int[], int, java.lang.String[])">launchApp</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int launchApp(String appPath, 
                        String verb, 
                        String regKey, 
                        String commandLine, 
                        int[] retData, 
                        int numArgs, 
                        String[] args) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Launches the given app with a set of arguments.

<P>
The Java/native implementation of this method has changed as of 1.2.1.
Previously, thus was a WANC: i.e., the arguments to this method were passed through to native code, which handled
putting the arguments into the template. Now, this is handled in Java.

<P>
Now, only the appPath and retData arguments are used, and the rest are ignored.
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> appPath</I></TD> <TD>the command line which will be passed to CreateProcess. Any arguments must be added to this
command line Java-side.</TD></TR>
<TR VALIGN=TOP> <TD><I> retData</I></TD> <TD>on return, contains the AppData for the process. See AppProcessMSVM.java for a description of AppData.</TD></TR>
<TR VALIGN=TOP> <TD><I> allotherarguments</I></TD> <TD>ignored; set to 0 or null</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="launchURL"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="launchURL(java.lang.String, int, java.lang.String[])">launchURL</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int launchURL(String url, 
                        int flags, 
                        String[] preferredBrowsers) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Launches the given URL.
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> url</I></TD> <TD>the fully qualified URL</TD></TR>
<TR VALIGN=TOP> <TD><I> flags</I></TD> <TD>currently ignored</TD></TR>
<TR VALIGN=TOP> <TD><I> preferredBrowsers</I></TD> <TD>currently ignored</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="findAppsByName"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="findAppsByName(java.lang.String, int, int)">findAppsByName</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static String[] findAppsByName(String appName, 
                                  int maxToReturn, 
                                  int flags) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Returns the full paths of the apps which match the given name.
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> appName</I></TD> <TD>the string to search for.</TD></TR>
<TR VALIGN=TOP> <TD><I> maxToReturn</I></TD> <TD>indicates the maximum number of AppFiles to return. NOTE: this is used as
a hint only; the actual array size may be greater or less than this.</TD></TR>
<TR VALIGN=TOP> <TD><I> flags</I></TD> <TD>the lower two bits of this int indicate the level of searching which should be
performed. 0 indicates only standard searching; 1, 2, and 3 indicate increasingly full searching
The remaining bits of this int are reserved, and should be set to zero.</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="findAppsByExtension"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="findAppsByExtension(java.lang.String, int, int)">findAppsByExtension</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static String[] findAppsByExtension(String ext, 
                                       int maxToReturn, 
                                       int flags) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Returns the full paths of the apps which are used to launch files with the given extension
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> ext</I></TD> <TD>the extension being searched for: ".txt"</TD></TR>
<TR VALIGN=TOP> <TD><I> maxToReturn</I></TD> <TD>the maximum number to return. This is a hint only.</TD></TR>
<TR VALIGN=TOP> <TD><I> flags</I></TD> <TD>reserved; set to 0</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="verifyNativeAppData"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="verifyNativeAppData(int[])">verifyNativeAppData</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int verifyNativeAppData(int[] appData) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Indicates if the process with the given AppData is still running.
See AppProcessMSVM.java for a description of AppData.

<BR><B>WANC</B><BR>
<P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="quitApp"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="quitApp(int[], int)">quitApp</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int quitApp(int[] appData, 
                      int flags) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Quits the given process.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> appData</I></TD> <TD>the AppData
See AppProcessMSVM.java for a description of AppData.</TD></TR>
<TR VALIGN=TOP> <TD><I> flags</I></TD> <TD>ignored; set to 0</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="moveApp"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="moveApp(int[], int, int)">moveApp</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int moveApp(int[] appData, 
                      int selector, 
                      int flags) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Moves the given process.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> appData</I></TD> <TD>the AppData
See AppProcessMSVM.java for a description of AppData.</TD></TR>
<TR VALIGN=TOP> <TD><I> selector</I></TD> <TD>one of the 'APP_MOVE_TOFRONT', etc. constants defined in AppProcess.java</TD></TR>
<TR VALIGN=TOP> <TD><I> flags</I></TD> <TD>ignored; set to 0</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="findFirstFile"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="findFirstFile(java.lang.String, int[], int[], java.lang.String[])">findFirstFile</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int findFirstFile(String searchStr, 
                            int[] hFind, 
                            int[] attrs, 
                            String[] fileName) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Wraps WinAPI FindFirstFile.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> searchStr</I></TD> <TD>the full path to be searched</TD></TR>
<TR VALIGN=TOP> <TD><I> hFind</I></TD> <TD>on return, hFind[ 0 ] will contain the search handle to be used with findNextFile and findClose
You must call findClose when you are finished searching</TD></TR>
<TR VALIGN=TOP> <TD><I> attrs</I></TD> <TD>on return, attrs[ 0 ] will contain attributes for the file. See the kFindFirstAttr??? values above.</TD></TR>
<TR VALIGN=TOP> <TD><I> fileName</I></TD> <TD>on return fileName[ 0 ] will contain the first matching file name</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="findNextFile"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="findNextFile(int, int[], java.lang.String[])">findNextFile</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int findNextFile(int findHandle, 
                           int[] attrs, 
                           String[] fileName) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Wraps WinAPI FindNextFile.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> findHandle</I></TD> <TD>the search handle obtained from a previous call to findFirstFile.</TD></TR>
<TR VALIGN=TOP> <TD><I> attrs</I></TD> <TD>on return, attrs[ 0 ] will contain attributes for the file. See the kFindFirstAttr??? values above.</TD></TR>
<TR VALIGN=TOP> <TD><I> fileName</I></TD> <TD>on return fileName[ 0 ] will contain the next matching file name</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="findClose"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="findClose(int)">findClose</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int findClose(int findHandle) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Wraps WinAPI FindClose.

<BR><B>WANC</B><BR>
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> findHandle</I></TD> <TD>the search handle obtained from a previous call to findFirstFile.
You must call this method when you are finished searching</TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="findVerbs"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="findVerbs(java.lang.String[], java.lang.String, int, int[], java.lang.String[])">findVerbs</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int findVerbs(String[] fullPaths, 
                        String fileName, 
                        int maxToReturn, 
                        int[] numReturned, 
                        String[] triples) </PRE>
<BLOCKQUOTE>
<DL>
<P>
See the CommandLineUtilsMSVM.findVerbs() method.

<BR><B>WANC</B><BR>
<P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getVolumeDate"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getVolumeDate(java.lang.String, int[])">getVolumeDate</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getVolumeDate(String driveName, 
                            int[] datesArray) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Gets the creation/modification/access dates of a volume.
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> driveName</I></TD> <TD>Needs to be documented</TD></TR>
<TR VALIGN=TOP> <TD><I> datesArray</I></TD> <TD>on return, the dates will be placed in this array at the offsets defined by the
kXXXDateOffset constants. This array must have at least kDateBundleArrayLen elements.

<BR><B>WANC</B><BR></TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getFileDate"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getFileDate(java.lang.String, int[])">getFileDate</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getFileDate(String path, 
                          int[] datesArray) </PRE>
<BLOCKQUOTE>
<DL>
<P>
Gets the creation/modification/access dates of a file/folder.
<P>
<TABLE WIDTH="87%" BORDER=1 CELLPADDING=3 CELLSPACING=0> <TR VALIGN=TOP BGCOLOR="#CCCCCC"> <TD><B>Parameter</B></TD> <TD><B>Description</B></TD> </TR>
<TR VALIGN=TOP> <TD><I> path</I></TD> <TD>the full path of the file/folder</TD></TR>
<TR VALIGN=TOP> <TD><I> datesArray</I></TD> <TD>on return, the dates will be placed in this array at the offsets defined by the
kXXXDateOffset constants. This array must have at least kDateBundleArrayLen elements.

<BR><B>WANC</B><BR></TD></TR>
</TABLE><P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getAllProcessInfo"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getAllProcessInfo(int[], int[], int[], int[], int[], int[], int[], int[], int[], int[], java.lang.String[], int, int[])">getAllProcessInfo</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getAllProcessInfo(int[] cntUsageArray, 
                                int[] th32ProcessIDArray, 
                                int[] th32DefaultHeapIDArray, 
                                int[] th32ModuleIDArray, 
                                int[] cntThreadsArray, 
                                int[] th32ParentProcessIDArray, 
                                int[] pcPriClassBaseArray, 
                                int[] dwFlagsArray, 
                                int[] dwThreadIDArray, 
                                int[] hWndArray, 
                                String[] fullPathArray, 
                                int maxToReturn, 
                                int[] numReturned) </PRE>
<BLOCKQUOTE>
<DL>
<P>
<BR><B>WANC</B><BR>
<P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="getShortPathName"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="getShortPathName(java.lang.String, java.lang.String[])">getShortPathName</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   static int getShortPathName(String inFileName, 
                               String[] outFileName) </PRE>
<BLOCKQUOTE>
<DL>
<P>
<BR><B>WANC</B><BR>
<P>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeLaunchApp"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeLaunchApp(java.lang.String, java.lang.String, java.lang.String, java.lang.String, int[], int, java.lang.String[])">nativeLaunchApp</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeLaunchApp(String appPath, 
                                             String verb, 
                                             String regKey, 
                                             String commandLine, 
                                             int[] retData, 
                                             int numArgs, 
                                             String[] args) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeGetVolumeDate"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeGetVolumeDate(int, java.lang.String, int[])">nativeGetVolumeDate</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeGetVolumeDate(int unused, 
                                                 String driveName, 
                                                 int[] datesArray) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeGetFileDate"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeGetFileDate(int, java.lang.String, int[])">nativeGetFileDate</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeGetFileDate(int unused, 
                                               String path, 
                                               int[] datesArray) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeVerifyNativeAppData"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeVerifyNativeAppData(int[])">nativeVerifyNativeAppData</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeVerifyNativeAppData(int[] appData) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeQuitApp"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeQuitApp(int[], int)">nativeQuitApp</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeQuitApp(int[] appData, 
                                           int flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeMoveApp"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeMoveApp(int[], int, int)">nativeMoveApp</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeMoveApp(int[] appData, 
                                           int selector, 
                                           int flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeFindAppsByName"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeFindAppsByName(java.lang.String, int, int, int[], java.lang.String[])">nativeFindAppsByName</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeFindAppsByName(String appName, 
                                                  int maxToReturn, 
                                                  int flags, 
                                                  int[] numReturned, 
                                                  String[] paths) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeFindAppsByExtension"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeFindAppsByExtension(java.lang.String, java.lang.String, int, int, int[], java.lang.String[])">nativeFindAppsByExtension</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeFindAppsByExtension(String appName, 
                                                       String tempDir, 
                                                       int maxToReturn, 
                                                       int flags, 
                                                       int[] numReturned, 
                                                       String[] paths) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeFindVerbs"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeFindVerbs(java.lang.String[], java.lang.String, int, int[], java.lang.String[])">nativeFindVerbs</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeFindVerbs(String[] fullPaths, 
                                             String fileName, 
                                             int maxToReturn, 
                                             int[] numReturned, 
                                             String[] triples) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeLaunchURL"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeLaunchURL(java.lang.String, java.lang.String, int, java.lang.String[])">nativeLaunchURL</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeLaunchURL(String url, 
                                             String tempDir, 
                                             int flags, 
                                             String[] preferredBrowsers) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeResolveLinkFile"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeResolveLinkFile(java.lang.String, java.lang.String[], int)">nativeResolveLinkFile</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeResolveLinkFile(String linkFilePath, 
                                                   String[] retPath, 
                                                   int flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeGetExecutableType"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeGetExecutableType(java.lang.String, int[])">nativeGetExecutableType</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeGetExecutableType(String fullPath, 
                                                     int[] val) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeGetFileAttributes"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeGetFileAttributes(java.lang.String, int[])">nativeGetFileAttributes</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeGetFileAttributes(String fullPath, 
                                                     int[] val) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeGetFileAttributesMask"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeGetFileAttributesMask(java.lang.String, int[])">nativeGetFileAttributesMask</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeGetFileAttributesMask(String fullPath, 
                                                         int[] val) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeSetFileAttributes"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeSetFileAttributes(java.lang.String, int, int)">nativeSetFileAttributes</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeSetFileAttributes(String thePath, 
                                                     int whichFlags, 
                                                     int newValues) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeGetFileAttributesWriteMask"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeGetFileAttributesWriteMask(java.lang.String, int[])">nativeGetFileAttributesWriteMask</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeGetFileAttributesWriteMask(String thePath, 
                                                              int[] val) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeGetAllMonitorInfo"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeGetAllMonitorInfo(int[], int, int[])">nativeGetAllMonitorInfo</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeGetAllMonitorInfo(int[] monitorInfo, 
                                                     int maxToReturn, 
                                                     int[] numReturned) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeGetMainMonitorInfo"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeGetMainMonitorInfo(int[])">nativeGetMainMonitorInfo</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeGetMainMonitorInfo(int[] monitorInfo) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeSetVolumeLabel"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeSetVolumeLabel(java.lang.String, java.lang.String)">nativeSetVolumeLabel</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeSetVolumeLabel(String driveName, 
                                                  String newLabel) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeGetDriveDisplayName"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeGetDriveDisplayName(java.lang.String, java.lang.String[])">nativeGetDriveDisplayName</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeGetDriveDisplayName(String driveName, 
                                                       String[] displayName) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeGetVolumeFlags"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeGetVolumeFlags(java.lang.String, int[])">nativeGetVolumeFlags</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeGetVolumeFlags(String driveName, 
                                                  int[] flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeGetVolumeReadFlagsMask"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeGetVolumeReadFlagsMask(java.lang.String, int[])">nativeGetVolumeReadFlagsMask</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeGetVolumeReadFlagsMask(String driveName, 
                                                          int[] flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeGetVolumeCapInfo"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeGetVolumeCapInfo(java.lang.String, long[])">nativeGetVolumeCapInfo</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeGetVolumeCapInfo(String driveName, 
                                                    long[] capInfo) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeGetVolumeInformation"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeGetVolumeInformation(java.lang.String, java.lang.String[], int[])">nativeGetVolumeInformation</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeGetVolumeInformation(String driveName, 
                                                        String[] infoStr, 
                                                        int[] infoInt) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeGetVolumes"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeGetVolumes(int, int[], java.lang.String[])">nativeGetVolumes</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeGetVolumes(int maxToReturn, 
                                              int[] numReturned, 
                                              String[] driveNames) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeCreateVolumeAlias"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeCreateVolumeAlias(java.lang.String, java.lang.String, int)">nativeCreateVolumeAlias</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeCreateVolumeAlias(String driveName, 
                                                     String newAliasPath, 
                                                     int flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeCreateFileAlias"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeCreateFileAlias(java.lang.String, java.lang.String, int)">nativeCreateFileAlias</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeCreateFileAlias(String targetPath, 
                                                   String newAliasPath, 
                                                   int flags) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeVIPGetFileVersionInfoStart"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeVIPGetFileVersionInfoStart(java.lang.String)">nativeVIPGetFileVersionInfoStart</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeVIPGetFileVersionInfoStart(String fileName) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeVIPVerQueryValue"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeVIPVerQueryValue(int, java.lang.String, java.lang.String[])">nativeVIPVerQueryValue</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeVIPVerQueryValue(int versionH, 
                                                    String key, 
                                                    String[] value) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeVIPGetFileVersionInfoEnd"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeVIPGetFileVersionInfoEnd(int)">nativeVIPGetFileVersionInfoEnd</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeVIPGetFileVersionInfoEnd(int versionH) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeGetFileIcon"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeGetFileIcon(java.lang.String, int, int, int, int, int, int[])">nativeGetFileIcon</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeGetFileIcon(String fullPath, 
                                               int whichIcon, 
                                               int w, 
                                               int h, 
                                               int xform, 
                                               int align, 
                                               int[] pData) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeGetExtIcon"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeGetExtIcon(java.lang.String, int, int, int, int, int, int[])">nativeGetExtIcon</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeGetExtIcon(String ext, 
                                              int whichIcon, 
                                              int w, 
                                              int h, 
                                              int xform, 
                                              int align, 
                                              int[] pData) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeGetVolumeIcon"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeGetVolumeIcon(java.lang.String, int, int, int, int, int, int[])">nativeGetVolumeIcon</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeGetVolumeIcon(String driveName, 
                                                 int whichIcon, 
                                                 int w, 
                                                 int h, 
                                                 int xform, 
                                                 int align, 
                                                 int[] pData) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeFindFirstFile"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeFindFirstFile(java.lang.String, int[], int[], java.lang.String[])">nativeFindFirstFile</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeFindFirstFile(String searchStr, 
                                                 int[] hFind, 
                                                 int[] attrs, 
                                                 String[] fileName) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeFindNextFile"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeFindNextFile(int, int[], java.lang.String[])">nativeFindNextFile</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeFindNextFile(int findHandle, 
                                                int[] attrs, 
                                                String[] fileName) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeFindClose"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeFindClose(int)">nativeFindClose</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeFindClose(int findHandle) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeGetAllProcessInfo"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeGetAllProcessInfo(int[], int[], int[], int[], int[], int[], int[], int[], int[], int[], java.lang.String[], int, int[])">nativeGetAllProcessInfo</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeGetAllProcessInfo(int[] cntUsageArray, 
                                                     int[] th32ProcessIDArray, 
                                                     int[] th32DefaultHeapIDArray, 
                                                     int[] th32ModuleIDArray, 
                                                     int[] cntThreadsArray, 
                                                     int[] th32ParentProcessIDArray, 
                                                     int[] pcPriClassBaseArray, 
                                                     int[] dwFlagsArray, 
                                                     int[] dwThreadIDArray, 
                                                     int[] hWndArray, 
                                                     String[] fullPathArray, 
                                                     int maxToReturn, 
                                                     int[] numReturned) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>

<TABLE WIDTH=100% CELLSPACING=0 CELLPADDING=1 BORDER=0> <TR> <TD WIDTH=80%>
<BR><H3><A NAME="nativeGetShortPathName"><FONT COLOR="#00DD00">&middot;</FONT></A>
<A NAME="nativeGetShortPathName(java.lang.String, java.lang.String[])">nativeGetShortPathName</A> </H3>
</TD> <TD ALIGN=right WIDTH=20%> <FONT SIZE="-2"><A HREF="#_Summary_">Summary</A> &nbsp;|&nbsp; <A HREF=#_top_>Top</A></FONT> </TD> </TR> </TABLE>
<PRE>
   private static native int nativeGetShortPathName(String inFileName, 
                                                    String[] outFileName) </PRE>
<BLOCKQUOTE>
<DL>
</DL>
</BLOCKQUOTE> <BR>


<HR SIZE=1 ALIGN=left WIDTH="98%">
<PRE>
<A HREF="packages.htm">All Packages</A>  <A HREF="pak-bd9a.htm">This Package</A>  <A HREF="tree.htm">Class Hierarchy</A>  <A HREF="search.htm">Class Search</A>  <A HREF="index.htm">Index</A>
</PRE>
<FONT FACE="Arial,Helvetica" SIZE=-2>
Freshly brewed Java API Documentation automatically generated with <A HREF="http://www.ualberta.ca/~tgee/polardoc">polardoc</A> Version 1.0.7
<BR>
</FONT>
</BODY>
</HTML>
