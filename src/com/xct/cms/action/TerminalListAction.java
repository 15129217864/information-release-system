/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.xct.cms.action;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.xct.cms.dao.TerminalDAO;
import com.xct.cms.domin.Terminal;
import com.xct.cms.domin.Users;
import com.xct.cms.utils.PageDAO;
import com.xct.cms.utils.Pager;
import com.xct.cms.utils.UtilDAO;

public class TerminalListAction extends Action {
	
	Logger logger = Logger.getLogger(TerminalListAction.class);
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws IOException 
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		// TODO Auto-generated method stub
		
		String cmd=request.getParameter("cmd");
		String zu_id=request.getParameter("zu_id")==null?"no":request.getParameter("zu_id");
		String left_cmd=request.getParameter("left_cmd");
		String terminalstr=UtilDAO.getGBK(request.getParameter("terminalstr"));
		String maxpage=request.getParameter("maxpage")==null?"15":request.getParameter("maxpage");
		/**
		 * cmd是区分内容页面显示“监控”还是显示列表，MONITORING表示显示监控、LIST表示显示列表
		 * zu_id 是组的ID号，用来根据组ID查询终端
		 * left_cmd为左边菜单的分类传参，值有：
		 * 活动： ACTIVE
		 * 非活动：INACTIVE
		 * 升序排序：ASC
		 * 降序排序：DESC
		 * 组管理：ZU
		 */
		String result="list";
		
		///判断跳转到监控页面还是列表页面！
		if("list_ifrm".equals(cmd)){
			try
			{
				/**
				 * zu_id 是组的ID号，用来根据组ID查询终端
				 * left_cmd为左边菜单的分类传参，值有：
				 * 活动： ACTIVE
				 * 非活动：INACTIVE
				 * 升序排序：ASC
				 * 降序排序：DESC
				 * 组管理：ZU
				 */
				Users user = (Users) request.getSession().getAttribute("lg_user");
				String username=user.getLg_name();
				Map<Integer,Terminal> zumap =new HashMap<Integer, Terminal>();
				zumap=(Map<Integer,Terminal>)request.getSession().getAttribute("user_cnt_zu_map");
				TerminalDAO terminaldao= new TerminalDAO();
				List terminalList=null;
				if("ACTIVE".equals(left_cmd)){
					terminalList=terminaldao.getSortList(terminaldao.getTerminalListByMap(zumap,left_cmd,""),"ASC");
				}else if("INACTIVE".equals(left_cmd)){
					terminalList=terminaldao.getSortList(terminaldao.getTerminalListByMap(zumap,left_cmd,""),"ASC");
				}else if("DORMANCY".equals(left_cmd)){
					terminalList=terminaldao.getSortList(terminaldao.getTerminalListByMap(zumap,left_cmd,""),"ASC");
				}
				else if("ASC".equals(left_cmd)){
					terminalList= terminaldao.getSortList(terminaldao.getTerminalListByMap(zumap,left_cmd,""), left_cmd);
				}else if("DESC".equals(left_cmd)){
					terminalList= terminaldao.getSortList(terminaldao.getTerminalListByMap(zumap,left_cmd,""), left_cmd);
				}else if("ZU".equals(left_cmd)){
					if("no".equals(zu_id)){
						terminalList=terminaldao.getSortList(terminaldao.getTerminalListByMap(zumap,left_cmd,"1"),"ASC");
					}else{
						terminalList=terminaldao.getSortList(terminaldao.getTerminalListByMap(zumap,left_cmd,zu_id),"ASC");
					}
				}else{
					terminalList=terminaldao.getSortList(terminaldao.getTerminalListByMap(zumap,left_cmd,""),"ASC");
				}
					List list3=null;
					Pager pager=null;
					if(terminalList!=null&&terminalList.size()>0){
						int pagenum =Integer.parseInt("".equals(request.getParameter("pagenum"))?"1":request.getParameter("pagenum"));
						pager= new Pager(terminalList.size(),pagenum,Integer.parseInt(maxpage)); 
						list3= new PageDAO().getPageList(terminalList, pager.getCurrentPage(), pager.getPageSize());
						request.setAttribute("pager", pager);
					}
					
//					logger.info("当前页终端数------------------>"+terminalList.size());
					
					response.resetBuffer();
					response.setContentType("text/xml;charset=gbk");
					response.setHeader("Cache-Control", "no-cache");
					response.setHeader("Pragma", "no-cache");
					response.setHeader("Cache-Control", "no-store, no-cache, must-revalidate");
					response.addHeader("Cache-Control", "post-check=0, pre-check=0");
					response.setDateHeader("Expires", 0L);
					PrintWriter writer = response.getWriter();
					
					writer.println("<?xml version='1.0' encoding='gbk' ?>");
					writer.println("<response>");
					if(list3!=null){
						writer.println((new StringBuilder()).append("<cnt_size>").append(terminalList.size()).append("</cnt_size>").toString());
						writer.println((new StringBuilder()).append("<size>").append(list3.size()).append("</size>").toString());
						writer.println((new StringBuilder()).append("<pre_num>").append(pager.getCurrentPage()-1).append("</pre_num>").toString());
						writer.println((new StringBuilder()).append("<next_num>").append(pager.getCurrentPage()+1).append("</next_num>").toString());
						writer.println((new StringBuilder()).append("<end_num>").append(pager.getEnd()).append("</end_num>").toString());
						writer.println((new StringBuilder()).append("<current_num>").append(pager.getCurrentPage()).append("</current_num>").toString());
						writer.println((new StringBuilder()).append("<total_num>").append(pager.getTotalPage()).append("</total_num>").toString());
						
						for (int i = 0; i < list3.size(); i++){
						
							Terminal terminal = (Terminal)list3.get(i);
							writer.println((new StringBuilder()).append("<terminal_").append(i).append(">").toString());
							writer.println((new StringBuilder()).append("<terminal_name>").append(terminal.getCnt_name()).append("</terminal_name>").toString());
							writer.println((new StringBuilder()).append("<terminal_ip>").append(terminal.getCnt_ip()).append("</terminal_ip>").toString());
							writer.println((new StringBuilder()).append("<terminal_zuname>").append(terminal.getZu_name()).append("</terminal_zuname>").toString());
							writer.println((new StringBuilder()).append("<terminal_mac>").append(terminal.getCnt_mac()).append("</terminal_mac>").toString());
							writer.println((new StringBuilder()).append("<terminal_status>").append(terminal.getCnt_islink()).append("</terminal_status>").toString());
							writer.println((new StringBuilder()).append("<terminal_playstyle>").append(terminal.getCnt_playstyle()).append("</terminal_playstyle>").toString());
							writer.println((new StringBuilder()).append("<terminal_programname>").append(terminal.getCnt_nowProgramName()).append("</terminal_programname>").toString());
							writer.println((new StringBuilder()).append("</terminal_").append(i).append(">").toString());
						}
					}else{
						writer.println((new StringBuilder()).append("<error>").append("暂无终端信息！").append("</error>").toString());
					}
					writer.println("</response>");
					writer.flush();
					writer.close();
			}catch (Exception ex) {
				ex.printStackTrace();
				response.resetBuffer(); 
				response.setContentType("text/xml;charset=gbk");
				response.setHeader("Pragma", "no-cache");
				response.setHeader("Cache-Control", "no-store, no-cache, must-revalidate");
				response.addHeader("Cache-Control", "post-check=0, pre-check=0");
				response.setDateHeader("Expires", 0L);
				response.setStatus(200);
				PrintWriter writer = response.getWriter();
				writer.println("<?xml version='1.0' encoding='gbk' ?>");
				writer.println("<response>");
				writer.println((new StringBuilder()).append("<error>").append("获取终端失败").append("</error>").toString());
				writer.println("</response>");
				writer.flush();
				writer.close();
			}
			result="list_ifrm";
		}else if("LIST".equals(cmd)){
			result="list";
		}else if("list_ifrmList".equals(cmd)){
			result="list_ifrmList";
		}else if("NOTAUDIT".equals(cmd)){
			TerminalDAO terminaldao= new TerminalDAO();
			
			//Mysql
			List<Terminal>list= terminaldao.getALLTerminalDAO("where cnt_status='0' order by CAST(REPLACE(cnt_ip,'.','') AS SIGNED)");
			//SQLServer
//			List<Terminal>list= terminaldao.getALLTerminalDAO("where cnt_status='0'  order by convert(numeric(15),replace(cnt_ip,'.',''))");
			
			request.setAttribute("allTerminal", list);
			result="notaudit";
		}else if("MONITORING".equals(cmd)){
			result="monitoringList";
		}
		request.setAttribute("terminalstr", terminalstr);
		request.setAttribute("cmd", cmd);
		request.setAttribute("zu_id", zu_id);
		request.setAttribute("left_cmd", left_cmd);
		return mapping.findForward(result);
	}
}